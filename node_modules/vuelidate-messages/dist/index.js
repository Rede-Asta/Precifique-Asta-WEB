"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var defaultOptions = {
    dirty: true,
    first: 1
};
function validationMessages(messages, opts) {
    return function (field) {
        var _this = this;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        opts = __assign(__assign({}, defaultOptions), opts);
        if (field.$pending || (opts.dirty && !field.$dirty))
            return [];
        var isInvalid = function (x) { return x.charAt(0) !== '$' && field[x] === false; };
        var keys = Object.keys(field).filter(isInvalid).slice(0, opts.first);
        return keys.map(function (x) {
            var _a;
            if (!messages[x])
                return 'Invalid';
            return (_a = messages[x]).call.apply(_a, __spreadArrays([_this, field], args));
        });
    };
}
exports.validationMessages = validationMessages;
function validationMessage(messages, opts) {
    var mkMsgs = validationMessages(messages, __assign(__assign({}, opts), { first: 1 }));
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return mkMsgs.apply(this, args)[0] || '';
    };
}
exports.validationMessage = validationMessage;
