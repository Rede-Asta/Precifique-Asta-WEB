{"remainingRequest":"/home/aline/AstaPrecifique/node_modules/babel-loader/lib/index.js!/home/aline/AstaPrecifique/node_modules/ts-loader/index.js??ref--13-2!/home/aline/AstaPrecifique/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/aline/AstaPrecifique/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/aline/AstaPrecifique/src/views/Product/ProductCreateOrEditImages.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/home/aline/AstaPrecifique/src/views/Product/ProductCreateOrEditImages.vue","mtime":1673321154842},{"path":"/home/aline/AstaPrecifique/node_modules/cache-loader/dist/cjs.js","mtime":1673370377252},{"path":"/home/aline/AstaPrecifique/node_modules/babel-loader/lib/index.js","mtime":1673370377198},{"path":"/home/aline/AstaPrecifique/node_modules/ts-loader/index.js","mtime":1673370387800},{"path":"/home/aline/AstaPrecifique/node_modules/cache-loader/dist/cjs.js","mtime":1673370377252},{"path":"/home/aline/AstaPrecifique/node_modules/vue-loader/lib/index.js","mtime":1673370389594}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/aline/AstaPrecifique/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/aline/AstaPrecifique/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/aline/AstaPrecifique/src/views/Product/ProductCreateOrEditImages.vue?vue&type=script&lang=ts&"],"names":[],"mappings":";;;;;;;;;;;;;;;AAmEA,OAAO,GAAP,MAAgB,KAAhB;AAEA,OAAO,uBAAP,MAAoC,6CAApC;AACA,OAAO,oBAAP,MAAiC,4EAAjC;AACA,OAAO,oBAAP,MAAiC,4EAAjC;AACA,OAAO,mBAAP,MAAgC,0EAAhC;AAGA,OAAO,UAAP,MAAuB,cAAvB;AACA,OAAO,eAAP,MAA4B,6BAA5B;AAYA,eAAe,GAAG,CAAC,MAAJ,CAAW;AACxB,EAAA,IAAI,EAAE,2BADkB;AAExB,EAAA,UAAU,EAAE;AACV,IAAA,mBAAmB,EAAnB,mBADU;AAEV,IAAA,oBAAoB,EAApB,oBAFU;AAGV,IAAA,oBAAoB,EAApB,oBAHU;AAIV,IAAA,uBAAuB,EAAvB;AAJU,GAFY;AASxB,EAAA,KAAK,EAAE;AACL,IAAA,IAAI,EAAE;AACJ,MAAA,IAAI,EAAE;AADF,KADD;AAKL,IAAA,WAAW,EAAE;AACX,MAAA,IAAI,EAAE;AADK,KALR;AASL,IAAA,SAAS,EAAE;AACT,MAAA,IAAI,EAAE,OADG;AAET,MAAA,OAAO,EAAE;AAAA,eAAM,KAAN;AAAA;AAFA,KATN;AAcL,IAAA,YAAY,EAAE;AACZ,MAAA,IAAI,EAAE,OADM;AAEZ,MAAA,OAAO,EAAE;AAAA,eAAM,KAAN;AAAA;AAFG,KAdT;AAmBL,IAAA,OAAO,EAAE;AACP,MAAA,IAAI,EAAE,CAAC,MAAD,EAAS,OAAT,CADC;AAEP,MAAA,OAAO,EAAE;AAAA,eAAM,KAAN;AAAA;AAFF;AAnBJ,GATiB;AAkCxB,EAAA,IAlCwB,kBAkCpB;AACF,WAAO;AACL,MAAA,mBAAmB,EAAE,IADhB;AAEL,MAAA,WAAW,EAAE,IAFR;AAGL,MAAA,SAAS,EAAE,EAHN;AAKL,MAAA,iBAAiB,EAAE,KALd;AAML,MAAA,cAAc,EAAE,KANX;AAOL,MAAA,eAAe,EAAE,IAAI,eAAJ,EAPZ;AAQL,MAAA,gBAAgB,EAAE;AARb,KAAP;AAUD,GA7CuB;AA+CxB,EAAA,QAAQ,EAAE;AACR,IAAA,SADQ,uBACC;AACP,aAAO,KAAK,YAAL,sBACS,KAAK,SAAL,GAAiB,SAAjB,GAA6B,SADtC,sDAEqC,KAAK,SAAL,GAAiB,SAAjB,GAA6B,SAFlE,CAAP;AAGD;AALO,GA/Cc;AAuDxB,EAAA,OAvDwB,qBAuDjB;AACL,QAAI,KAAK,OAAT,EAAkB;AAChB,WAAK,SAAL,GAAiB,KAAK,OAAL,CAAa,UAA9B;AACD;AACF,GA3DuB;AA6DxB,EAAA,OAAO,EAAE;AACP,IAAA,QADO,sBACC;AACL,WAAK,KAAL,CAAW,UAAX,CAA2C,KAA3C;AACF,KAHM;AAKP,IAAA,WALO,uBAKK,KALL,EAKU;AACf,WAAK,SAAL,CAAe,MAAf,CAAsB,KAAtB,EAA6B,CAA7B;AACD,KAPM;AASP,IAAA,SATO,qBASG,KATH,EASQ;AACb,UAAM,KAAK,GAAG,KAAK,SAAL,CAAe,KAAf,CAAd;AACA,WAAK,WAAL,GAAmB,KAAK,CAAC,SAAzB;AACA,WAAK,mBAAL,GAA2B,KAA3B;AAEA,WAAK,gBAAL,GAAwB,IAAxB;AACD,KAfM;AAiBP,IAAA,iBAjBO,mCAiB2B;AAAA;AAAA,UAAf,OAAe;AAAA,UAAN,KAAM;;AAChC,UAAI,OAAO,KAAK,SAAhB,EAA2B;AACzB,aAAK,IAAL,CAAU,KAAK,SAAf,EAA0B,KAAK,CAAC,QAAhC,kCACK,KAAK,SAAL,CAAe,KAAK,CAAC,QAArB,CADL;AAEE,UAAA,SAAS,EAAE,KAAK,CAAC,SAFnB;AAGE,UAAA,SAAS,EAAE,KAAK,CAAC;AAHnB;AAKD;;AAED,WAAK,gBAAL,GAAwB,KAAxB;AACA,WAAK,WAAL,GAAmB,IAAnB;AACA,WAAK,mBAAL,GAA2B,IAA3B;AACD,KA7BM;AA+BP,IAAA,gBA/BO,4BA+BU,KA/BV,EA+BiB,KA/BjB,EA+BsB;AAC3B,UAAI,QAAQ,GAAW,IAAI,CAAC,KAAL,CACpB,KAAK,CAAC,MAAN,GAAe,GAAhB,GAAuB,KAAK,CAAC,KADR,CAAvB;;AAIA,UAAI,KAAK,SAAL,IAAkB,KAAK,SAA3B,EAAsC;AACpC,aAAK,IAAL,CAAU,KAAK,SAAf,EAA0B,KAA1B,kCACK,KAAK,SAAL,CAAe,KAAf,CADL;AAEE,UAAA,cAAc,EAAE;AAFlB;AAID;AACF,KA1CM;AA4CP,IAAA,aA5CO,yBA4CO,MA5CP,EA4Ca;AAClB,aAAO,KAAK,eAAL,CAAqB,UAArB,mBACF,MADE,EAAP;AAGD,KAhDM;AAkDP,IAAA,aAlDO,yBAkDO,QAlDP,EAkDe;AACpB,aAAO,KAAK,eAAL,CAAqB,cAArB,CAAoC,KAAK,WAAzC,EAAsD,QAAtD,CAAP;AACD,KApDM;AAsDP,IAAA,KAtDO,iBAsDD,EAtDC,EAsDC;AACN,aAAO,IAAI,OAAJ,CAAY,UAAC,GAAD;AAAA,eAAS,UAAU,CAAC,GAAD,EAAM,EAAN,CAAnB;AAAA,OAAZ,CAAP;AACD,KAxDM;AA0DP,IAAA,IA1DO,kBA0DH;AACF,WAAK,KAAL,CAAW,eAAX,EAA4B,IAA5B;AACA,WAAK,OAAL,CAAa,IAAb,CAAkB,WAAlB;AACD,KA7DM;AA+DD,IAAA,mBA/DC,iCA+DkB;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEf,gBAAA,SAFe,GAEH,KAAI,CAAC,SAAL,CAAe,MAAf,CAAsB,UAAA,KAAK;AAAA,yBAAI,CAAC,KAAK,CAAC,KAAX;AAAA,iBAA3B,CAFG;AAGf,gBAAA,cAHe,GAGE,KAAI,CAAC,SAAL,CAAe,MAAf,CAAsB,UAAA,KAAK;AAAA,yBAAI,KAAK,CAAC,KAAV;AAAA,iBAA3B,CAHF;AAKjB,gBAAA,UALiB,GAKJ,EALI;;AAAA,sBAOjB,cAAc,CAAC,MAAf,GAAwB,CAPP;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAQI,KAAI,CAAC,aAAL,CAAmB,cAAc,CAAC,MAAlC,CARJ;;AAAA;AAAA;AAQX,gBAAA,IARW,yBAQX,IARW;AAUnB,gBAAA,UAAU,GAAG,IAAb;AAEA,gBAAA,KAAI,CAAC,iBAAL,GAAyB,IAAzB;AAZmB;AAAA,uBAcE,OAAO,CAAC,UAAR,CACnB,cAAc,CAAC,GAAf,CAAmB,UAAC,KAAD,EAAQ,KAAR,EAAiB;AAClC,yBAAO,KAAI,CAAC,aAAL,iCACF,UAAU,CAAC,KAAD,CAAV,CAAkB,IADhB;AAEL,oBAAA,KAAK,EAAE,KAAK,CAAC,SAFR;AAGL,oBAAA,wBAAwB,EAAE,KAAI,CAAC,gBAH1B;AAIL,oBAAA,QAAQ,EAAE;AAJL,qBAAP;AAMD,iBAPD,CADmB,CAdF;;AAAA;AAcb,gBAAA,MAda;AAAA;AAAA;;AAAA;AAyBnB,gBAAA,KAAI,CAAC,cAAL,GAAsB,IAAtB;;AAzBmB;AA4BrB,gBAAA,KAAI,CAAC,SAAL,CAAe,OAAf,CAAuB,UAAA,KAAK;AAAA,yBAAI,KAAK,CAAC,KAAN,GAAc,KAAlB;AAAA,iBAA5B;;AA5BqB;AAAA,uBA8Bf,KAAI,CAAC,eAAL,CAAqB,mBAArB,CACJ,KAAI,CAAC,WADD,+BAGC,cAAc,CAAC,GAAf,CAAmB,UAAC,KAAD,EAAQ,KAAR,EAAiB;AACrC,sBAAM,SAAS,GAAG,UAAU,CAAC,KAAD,CAAV,CAAkB,IAApC;AACA,yBAAO,SAAS,CAAC,GAAV,GAAgB,SAAS,CAAC,MAAV,CAAiB,GAAxC;AACD,iBAHE,CAHD,sBAOC,SAAS,CAAC,GAAV,CAAc,UAAA,KAAK;AAAA,yBAAI,KAAK,CAAC,SAAV;AAAA,iBAAnB,CAPD,GA9Be;;AAAA;AAyCrB,gBAAA,KAAI,CAAC,cAAL,GAAsB,IAAtB;AAEA,gBAAA,KAAI,CAAC,iBAAL,GAAyB,KAAzB;AA3CqB;AAAA,uBA6Cf,KAAI,CAAC,KAAL,CAAW,GAAX,CA7Ce;;AAAA;AA+CrB,gBAAA,KAAI,CAAC,KAAL,CAAW,eAAX,EAA4B,IAA5B;;AA/CqB;AAAA,uBAgDf,KAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,WAAlB,CAhDe;;AAAA;AAAA;AAAA,uBAkDf,KAAI,CAAC,MAAL,mBACO,KAAI,CAAC,YAAL,GAAoB,aAApB,GAAoC,aAD3C,mBAEJ,EAFI,EAGJ,SAHI,EAGO;AACX,kBAAA,KAAK,EAAE,IADI;AAEX,kBAAA,QAAQ,EAAE,SAFC;AAGX,kBAAA,iBAAiB,EAAE,KAHR;AAIX,kBAAA,KAAK,EAAE;AAJI,iBAHP,CAlDe;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA4DrB,gBAAA,OAAO,CAAC,KAAR;AA5DqB;AAAA,uBA8Df,KAAI,CAAC,MAAL,CAAY,oCAAZ,EAAkD,EAAlD,EAAsD,OAAtD,EAA+D;AACnE,kBAAA,KAAK,EAAE,IAD4D;AAEnE,kBAAA,QAAQ,EAAE,SAFyD;AAGnE,kBAAA,iBAAiB,EAAE,KAHgD;AAInE,kBAAA,KAAK,EAAE;AAJ4D,iBAA/D,CA9De;;AAAA;AAsEvB,gBAAA,KAAI,CAAC,iBAAL,GAAyB,KAAzB;;AAtEuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuExB,KAtIM;AAwIP,IAAA,YAxIO,wBAwIM,CAxIN,EAwIO;AAAA;;AACZ,UAAM,SAAS,GAAG,KAAK,KAAL,CAAW,UAAX,IAA6C,EAA/D;;AAEA,UAAI,SAAS,IAAI,SAAS,CAAC,KAAV,CAAiB,MAAlC,EAA0C;AACxC,YAAI,SAAS,GAAgB,SAAS,CAAC,KAAV,CAAiB,CAAjB,CAA7B;;AACA,YAAI,SAAS,CAAC,IAAV,GAAiB,OAAjB,GAA2B,EAA/B,EAAmC;AACjC,cAAM,UAAU,GAAG,IAAI,UAAJ,CAAe,SAAf,EAA0B;AAC3C,YAAA,OAAO,EAAE,GADkC;AAE3C,YAAA,KAAK,EAAE,IAFoC;AAG3C,YAAA,MAAM,EAAE,IAHmC;AAI3C,YAAA,WAAW,EAAE,CAJ8B;AAK3C,YAAA,OAAO;AAAA,qFAAE,kBAAO,eAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACD,wBAAA,MADC,GACQ,IAAI,UAAJ,EADR;;AAEP,4BAAI,eAAe,CAAC,IAAhB,GAAuB,OAAvB,GAAiC,CAArC,EAAwC;AACtC,0BAAA,SAAS,GAAG,eAAZ;AACA,0BAAA,MAAM,CAAC,aAAP,CAAqB,eAArB;;AACA,0BAAA,MAAM,CAAC,MAAP;AAAA,gGAAgB,kBAAO,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA,qDACd,MAAI,CAAC,SADS;AAAA,qDAED,CAAC,CAAC,MAAF,CAAS,MAFR;AAAA;AAAA,6CAGY,KAAK,CAAC,CAAC,CAAC,MAAF,CAAS,MAAV,CAHjB;;AAAA;AAAA;AAAA,4DAGoC,IAHpC;;AAAA;AAAA;AAAA;AAEZ,wCAAA,SAFY;AAGZ,wCAAA,SAHY;AAIZ,wCAAA,KAJY,EAIL;AAJK;;AAAA,mDACC,IADD;;AAMd,sCAAA,MAAI,CAAC,WAAL,GAAmB,CAAC,CAAC,MAAF,CAAS,MAA5B,CANc,CAOd;;AACA,sCAAA,SAAS,CAAC,KAAV,GAAkB,IAAlB;;AARc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAhB;;AAAA;AAAA;AAAA;AAAA;AAUD,yBAbD,MAaO;AACL,0BAAA,KAAK,CAAC,+CAAD,CAAL;AACD;;AAjBM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,eALoC;AAwB3C,YAAA,KAxB2C,iBAwBrC,GAxBqC,EAwBlC;AACP,cAAA,OAAO,CAAC,GAAR,CAAY,yBAAZ,EAAuC,GAAG,CAAC,OAA3C;AACD;AA1B0C,WAA1B,CAAnB;AA4BD,SA7BD,MA6BO;AACL,UAAA,KAAK,CAAC,+CAAD,CAAL;AACD;AACF;AACF;AA9KM;AA7De,CAAX,CAAf","sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport Vue from 'vue';\n\nimport ProductCreateOrEditStep from \"@/views/Product/ProductCreateOrEditStep.vue\";\nimport ProductImageCarousel from \"@/components/product-modal/product-image-carousel/ProductImageCarousel.vue\";\nimport ProductLoadingScreen from \"@/components/product-modal/product-loading-screen/ProductLoadingScreen.vue\";\nimport ProductImageCropper from \"@/components/product-modal/product-image-cropper/ProductImageCropper.vue\";\n\n\nimport Compressor from \"compressorjs\";\nimport productsService from \"@/services/products.service\";\n\ninterface IData {\n  imageToCrop: Blob | File | string | null;\n  imageList: any[];\n  openLoadingScreen: boolean;\n  productLoading: boolean;\n  productsService: productsService,\n  openImageCropper: boolean;\n  imageToCropPosition: number | null;\n}\n\nexport default Vue.extend({\n  name: \"ProductCreateOrEditImages\",\n  components: {\n    ProductImageCropper,\n    ProductLoadingScreen,\n    ProductImageCarousel,\n    ProductCreateOrEditStep,\n  },\n\n  props: {\n    open: {\n      type: Boolean,\n    },\n\n    productGuid: {\n      type: String,\n    },\n\n    isService: {\n      type: Boolean,\n      default: () => false,\n    },\n\n    isUpdatePage: {\n      type: Boolean,\n      default: () => false,\n    },\n\n    product: {\n      type: [Object, Boolean],\n      default: () => false,\n    }\n  },\n\n  data(): IData {\n    return {\n      imageToCropPosition: null,\n      imageToCrop: null,\n      imageList: [],\n\n      openLoadingScreen: false,\n      productLoading: false,\n      productsService: new productsService(),\n      openImageCropper: false,\n    }\n  },\n\n  computed: {\n    stepTitle(): string {\n      return this.isUpdatePage\n        ? `Fotos do ${this.isService ? 'serviço' : 'produto'}`\n        : `Melhore seu anúncio com fotos do seu ${this.isService ? 'serviço' : 'produto'}`\n    }\n  },\n\n  created() {\n    if (this.product) {\n      this.imageList = this.product.image_list;\n    }\n  },\n\n  methods: {\n    addImage() {\n      (this.$refs.imageInput as HTMLInputElement).click();\n    },\n\n    deleteImage(index) {\n      this.imageList.splice(index, 1);\n    },\n\n    cropImage(index) {\n      const image = this.imageList[index];\n      this.imageToCrop = image.image_url;\n      this.imageToCropPosition = index;\n\n      this.openImageCropper = true;\n    },\n\n    closeImageCropper([message, image]) {\n      if (message === 'success') {\n        this.$set(this.imageList, image.position, {\n          ...this.imageList[image.position],\n          image_url: image.image_url,\n          imageBlob: image.imageFile,\n        });\n      }\n\n      this.openImageCropper = false;\n      this.imageToCrop = null;\n      this.imageToCropPosition = null;\n    },\n\n    onUploadProgress(event, index) {\n      let progress: number = Math.round(\n        (event.loaded * 100) / event.total\n      );\n\n      if (this.imageList && this.imageList) {\n        this.$set(this.imageList, index, {\n          ...this.imageList[index],\n          uploadProgress: progress,\n        });\n      }\n    },\n\n    sendImageToS3(params) {\n      return this.productsService.uploadToS3({\n        ...params,\n      });\n    },\n\n    getSignatures(quantity) {\n      return this.productsService.getS3Signature(this.productGuid, quantity);\n    },\n\n    delay(ms) {\n      return new Promise((res) => setTimeout(res, ms));\n    },\n\n    skip() {\n      this.$emit('confirm-leave', true);\n      this.$router.push('/produtos');\n    },\n\n    async updateProductImages() {\n      try {\n        const oldImages = this.imageList.filter(image => !image.isNew);\n        const imagesToUpload = this.imageList.filter(image => image.isNew);\n\n        let signatures = [] as any[];\n\n        if (imagesToUpload.length > 0) {\n          const { data } = await this.getSignatures(imagesToUpload.length);\n\n          signatures = data;\n\n          this.openLoadingScreen = true;\n\n          const result = await Promise.allSettled(\n            imagesToUpload.map((image, index) => {\n              return this.sendImageToS3({\n                ...signatures[index].code,\n                image: image.imageBlob,\n                onUploadProgressCallback: this.onUploadProgress,\n                position: index,\n              });\n            }),\n          );\n        } else {\n          this.productLoading = true;\n        }\n\n        this.imageList.forEach(image => image.isNew = false)\n\n        await this.productsService.updateProductImages(\n          this.productGuid,\n          [\n            ...imagesToUpload.map((image, index) => {\n              const signature = signatures[index].code;\n              return signature.url + signature.fields.key;\n            }),\n            ...oldImages.map(image => image.image_url),\n          ]\n        );\n\n        this.productLoading = true;\n\n        this.openLoadingScreen = false;\n\n        await this.delay(500);\n\n        this.$emit('confirm-leave', true);\n        await this.$router.push('/produtos');\n\n        await this.$alert(\n          `Imagens ${this.isUpdatePage ? 'atualizadas' : 'adicionadas'} com sucesso`,\n          '',\n          'success', {\n          toast: true,\n          position: 'top-end',\n          showConfirmButton: false,\n          timer: 3000,\n        });\n      } catch (e) {\n        console.error(e);\n\n        await this.$alert('Erro ao fazer o upload das imagens', '', 'error', {\n          toast: true,\n          position: 'top-end',\n          showConfirmButton: false,\n          timer: 3000,\n        });\n      }\n\n      this.openLoadingScreen = false;\n    },\n\n    onImageInput(e) {\n      const fileInput = this.$refs.imageInput as HTMLInputElement || {};\n\n      if (fileInput && fileInput.files!.length) {\n        let imageFile: Blob | File = fileInput.files![0];\n        if (imageFile.size / 1000000 < 15) {\n          const compressor = new Compressor(imageFile, {\n            quality: 0.5,\n            width: 1250,\n            height: 1250,\n            convertSize: 0,\n            success: async (imageCompressed) => {\n              const reader = new FileReader();\n              if (imageCompressed.size / 1000000 < 6) {\n                imageFile = imageCompressed;\n                reader.readAsDataURL(imageCompressed);\n                reader.onload = async (e: any) => {\n                  this.imageList.push({\n                    image_url: e.target.result,\n                    imageBlob: await (await fetch(e.target.result)).blob(),\n                    isNew: true,\n                  });\n                  this.imageToCrop = e.target.result;\n                  //@ts-ignore\n                  fileInput.value = null;\n                };\n              } else {\n                alert(\"Reduza o tamanho de imagem e tente novamente.\");\n              }\n            },\n            error(err) {\n              console.log(\"erro comprimindo imagem\", err.message);\n            },\n          });\n        } else {\n          alert(\"Reduza o tamanho de imagem e tente novamente.\");\n        }\n      }\n    }\n  }\n});\n"],"sourceRoot":""}]}