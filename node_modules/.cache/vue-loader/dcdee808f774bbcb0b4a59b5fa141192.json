{"remainingRequest":"/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/aline/GitHub/admin-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/aline/GitHub/admin-frontend/src/components/header/Header.vue?vue&type=template&id=ed558de2&scoped=true&","dependencies":[{"path":"/home/aline/GitHub/admin-frontend/src/components/header/Header.vue","mtime":1675112939534},{"path":"/home/aline/GitHub/admin-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1673370377252},{"path":"/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1673370389594},{"path":"/home/aline/GitHub/admin-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1673370377252},{"path":"/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/index.js","mtime":1673370389594}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}