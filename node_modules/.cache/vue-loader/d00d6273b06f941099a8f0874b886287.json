{"remainingRequest":"/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/aline/GitHub/admin-frontend/src/components/product-modal/product-image-edit/ProductImageEdit.vue?vue&type=template&id=aac8a52a&scoped=true&","dependencies":[{"path":"/home/aline/GitHub/admin-frontend/src/components/product-modal/product-image-edit/ProductImageEdit.vue","mtime":1673321154838},{"path":"/home/aline/GitHub/admin-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1673370377252},{"path":"/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1673370389594},{"path":"/home/aline/GitHub/admin-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1673370377252},{"path":"/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/index.js","mtime":1673370389594}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}