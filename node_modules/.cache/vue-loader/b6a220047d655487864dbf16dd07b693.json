{"remainingRequest":"/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/aline/GitHub/admin-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/aline/GitHub/admin-frontend/src/components/product-modal/ProductModal.vue?vue&type=template&id=69bfa768&scoped=true&","dependencies":[{"path":"/home/aline/GitHub/admin-frontend/src/components/product-modal/ProductModal.vue","mtime":1696439584633},{"path":"/home/aline/GitHub/admin-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1673370377252},{"path":"/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1673370389594},{"path":"/home/aline/GitHub/admin-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1673370377252},{"path":"/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/index.js","mtime":1673370389594}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ21vZGFsJyx7YXR0cnM6eyJhY3RpdmUiOl92bS5zaG93Q3JlYXRlUHJvZHVjdCB8fCBfdm0uc2hvd0VkaXRQcm9kdWN0fX0sWyhfdm0uc2hvd0NyZWF0ZVByb2R1Y3QgfHwgX3ZtLnNob3dFZGl0UHJvZHVjdCk/X2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJjYXJkIGNhcmQtcHJvZHV0byJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImNhcmQtYm9keSJ9LFsoIV92bS5sb2FkaW5nQ29udHJvbGxlcik/X2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJteS1jbG9zZS1vcmRlcnMiLGF0dHJzOnsidGl0bGUiOiJGZWNoYXIgTW9kYWwifSxvbjp7ImNsaWNrIjpmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0ub3BlbkNsb3NlTW9kYWwoKX19fSxbX2MoJ2knLHtzdGF0aWNDbGFzczoiZmFzIGZhLXRpbWVzIn0pXSk6X3ZtLl9lKCksX2MoJ3NlY3Rpb24nLHtzdGF0aWNDbGFzczoiY2FyZC10aXRsZXMifSxbX2MoJ2gyJyx7c3RhdGljQ2xhc3M6ImNhcmQtdGl0bGUgdGV4dC11cHBlcmNhc2UifSxbX3ZtLl92KF92bS5fcyhfdm0udGl0bGUpKV0pLF9jKCdwJyx7c3RhdGljQ2xhc3M6ImNhcmQtc3VidGl0bGUifSxbX3ZtLl92KF92bS5fcyhfdm0uc3VidGl0bGUpKV0pXSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJqc29uIn0sW19jKCdwJyx7c3RhdGljQ2xhc3M6InRleHQtbXV0ZWQgbS0wIn0sW192bS5fdigiZ3VpZDogIitfdm0uX3MoX3ZtLnByb2R1Y3RTZWxlY3RlZC5ndWlkKSldKSxfYygncCcse3N0YXRpY0NsYXNzOiJ0ZXh0LW11dGVkIG0tMCJ9LFtfdm0uX3YoIiBpbWFnZV91cmw6ICIrX3ZtLl9zKF92bS5wcm9kdWN0U2VsZWN0ZWQuaW1hZ2VfdXJsKSsiICIpXSksX2MoJ3AnLHtzdGF0aWNDbGFzczoidGV4dC1tdXRlZCBtLTAifSxbX3ZtLl92KCJuYW1lOiAiK192bS5fcyhfdm0ucHJvZHVjdFNlbGVjdGVkLm5hbWUpKV0pLF9jKCdwJyx7c3RhdGljQ2xhc3M6InRleHQtbXV0ZWQgbS0wIn0sW192bS5fdigiIGRlc2NyaXB0aW9uOiAiK192bS5fcyhfdm0ucHJvZHVjdFNlbGVjdGVkLmRlc2NyaXB0aW9uKSsiICIpXSksX2MoJ3AnLHtzdGF0aWNDbGFzczoidGV4dC1tdXRlZCBtLTAifSxbX3ZtLl92KCJvcmRlcmluZzogIitfdm0uX3MoX3ZtLnByb2R1Y3RTZWxlY3RlZC5vcmRlcmluZykpXSksX2MoJ3AnLHtzdGF0aWNDbGFzczoidGV4dC1tdXRlZCBtLTAifSxbX3ZtLl92KCIgaXNfcHVibGlzaGVkOiAiK192bS5fcyhfdm0ucHJvZHVjdFNlbGVjdGVkLmlzX3B1Ymxpc2hlZCkrIiAiKV0pLF9jKCdwJyx7c3RhdGljQ2xhc3M6InRleHQtbXV0ZWQgbS0wIn0sW192bS5fdigic2VsbGVyOiAiK192bS5fcyhfdm0ucHJvZHVjdFNlbGVjdGVkLnNlbGxlcikpXSksX2MoJ3AnLHtzdGF0aWNDbGFzczoidGV4dC1tdXRlZCBtLTAifSxbX3ZtLl92KCIgcHJvbW90aW9uOiAiK192bS5fcyhfdm0ucHJvZHVjdFNlbGVjdGVkLnByb21vdGlvbikrIiAiKV0pLF9jKCdwJyx7c3RhdGljQ2xhc3M6InRleHQtbXV0ZWQgbS0wIn0sW192bS5fdigiZGVsZXRlZDogIitfdm0uX3MoX3ZtLnByb2R1Y3RTZWxlY3RlZC5kZWxldGVkKSldKSxfYygncCcse3N0YXRpY0NsYXNzOiJ0ZXh0LW11dGVkIG0tMCJ9LFtfdm0uX3YoInZ0ZXh0X2lkOiAiK192bS5fcyhfdm0ucHJvZHVjdFNlbGVjdGVkLnZ0ZXh0X2lkKSldKSxfYygncCcse3N0YXRpY0NsYXNzOiJ0ZXh0LW11dGVkIG0tMCJ9LFtfdm0uX3YoImNhdGVnb3J5OiAiK192bS5fcyhfdm0ucHJvZHVjdFNlbGVjdGVkLmNhdGVnb3J5KSldKSxfYygncCcse3N0YXRpY0NsYXNzOiJ0ZXh0LW11dGVkIG0tMCJ9LFtfdm0uX3YoIiBuZXdfcHJpY2VfbWF4OiAiK192bS5fcyhfdm0ucHJvZHVjdFNlbGVjdGVkLm5ld19wcmljZV9tYXgpKyIgIildKSxfYygncCcse3N0YXRpY0NsYXNzOiJ0ZXh0LW11dGVkIG0tMCJ9LFtfdm0uX3YoIiBuZXdfcHJpY2VfbWluOiAiK192bS5fcyhfdm0ucHJvZHVjdFNlbGVjdGVkLm5ld19wcmljZV9taW4pKyIgIildKSxfYygncCcse3N0YXRpY0NsYXNzOiJ0ZXh0LW11dGVkIG0tMCJ9LFtfdm0uX3YoInNrdXM6ICIrX3ZtLl9zKF92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1cykpXSksX2MoJ3AnLHtzdGF0aWNDbGFzczoidGV4dC1tdXRlZCBtLTAifSxbX3ZtLl92KCIgcmVnaXN0ZXJfdHlwZTogIitfdm0uX3MoX3ZtLnByb2R1Y3RTZWxlY3RlZC5yZWdpc3Rlcl90eXBlKSsiICIpXSksX2MoJ3AnLHtzdGF0aWNDbGFzczoidGV4dC1tdXRlZCBtLTAifSxbX3ZtLl92KCIgcHJpY2VfdG9fbWF0Y2g6ICIrX3ZtLl9zKF92bS5wcm9kdWN0U2VsZWN0ZWQucHJpY2VfdG9fbWF0Y2gpKyIgIildKV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoiZC1mbGV4IGQtbWQtbm9uZSBqdXN0aWZ5LWNvbnRlbnQtZW5kIn0sW19jKCdidXR0b24nLHtzdGF0aWNDbGFzczoiXG4gICAgICAgICAgICBidG4gYnRuLWxpbmsgYnRuLWVkaXRcbiAgICAgICAgICAgIGQtZmxleFxuICAgICAgICAgICAgYWxpZ24taXRlbXMtY2VudGVyXG4gICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQtZW5kXG4gICAgICAgICAgICBweC0wXG4gICAgICAgICAgICBzbWFsbFxuICAgICAgICAgICAgd2QtMTAwXG4gICAgICAgICAgIixhdHRyczp7InRpdGxlIjoiQ2xpcXVlIGFxdWkgcGFyYSBlZGl0YXIgc3VhcyBpbWFnZW5zIn0sb246eyJjbGljayI6ZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLm9wZW5FZGl0SW1hZ2UoKX19fSxbX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczoibWF0ZXJpYWwtaWNvbnMgbXItMSBmdC0xOCJ9LFtfdm0uX3YoIm1vZGVfZWRpdCIpXSksX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczoiYnRuLWVkaXQtdGV4dCJ9LFtfdm0uX3YoIkVkaXRhciIpXSldKV0pLF9jKCdwcm9kdWN0LWltYWdlLWNhcm91c2VsJyx7c3RhdGljQ2xhc3M6ImQtbWQtbm9uZSBtYi0zIixhdHRyczp7InNsaWRlcyI6X3ZtLnByb2R1Y3RTZWxlY3RlZC5pbWFnZV9saXN0fSxvbjp7ImFkZC1jbGljayI6X3ZtLm9wZW5FZGl0SW1hZ2V9fSksX2MoJ3NlY3Rpb24nLHtzdGF0aWNDbGFzczoiY29sLTEyIHJvdyBtLWF1dG8gcC1zbS0yIHAtbWQtNCBjYXJkLWZvcm0gbXQtbWQtNSJ9LFtfYygnc2VjdGlvbicse3N0YXRpY0NsYXNzOiJjb2wtbGctNCBjb2wtc20tMTIgcHQtMyBwLW1kLTAifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJkLW5vbmUgZC1tZC1ibG9jayJ9LFtfYygnc3Bhbicse3N0YXRpY0NsYXNzOiJ2aWV3LWltZyJ9LFtfdm0uX3YoIlZpc3VhbGl6YcOnw6NvIildKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImNhZHByb2RfX3F1ZXN0aW9ucy0taW1hZ2UgYm9yZGVyLWxpZ2h0LWdyYXkifSxbX2MoJ2RpdicsWyhfdm0ucHJvZHVjdFNlbGVjdGVkLmltYWdlX2xpc3QubGVuZ3RoKT9fYygnaW1nJyx7c3RhdGljQ2xhc3M6ImNhZHByb2RfX3F1ZXN0aW9ucy0taW1hZ2UtLWNob3NlbiIsYXR0cnM6eyJzcmMiOl92bS5zZWxlY3RlZEltYWdlLCJhbHQiOiJwaG90byJ9fSk6X2MoJ2ltZycse3N0YXRpY1N0eWxlOnsibWFyZ2luLXRvcCI6Ii00cHgiLCJtYXJnaW4tbGVmdCI6Ii00cHgifSxhdHRyczp7InNyYyI6cmVxdWlyZSgiQC9hc3NldHMvaW1hZ2VzL2FkZC1hLXBob3RvLnN2ZyIpLCJhbHQiOiJwaG90byJ9fSldKV0pLF9jKCdzZWN0aW9uJyx7c3RhdGljQ2xhc3M6IlxuICAgICAgICAgICAgICAgIGQtZmxleFxuICAgICAgICAgICAgICAgIGZsZXgtY29sdW1uXG4gICAgICAgICAgICAgICAgYWxpZ24taXRlbXMtY2VudGVyXG4gICAgICAgICAgICAgICAganVzdGlmeS1jb250ZW50LWNlbnRlclxuICAgICAgICAgICAgICAifSxbX2MoJ2J1dHRvbicse3N0YXRpY0NsYXNzOiJcbiAgICAgICAgICAgICAgICAgIGJ0biBidG4tbGluayBidG4tZWRpdFxuICAgICAgICAgICAgICAgICAgZC1mbGV4XG4gICAgICAgICAgICAgICAgICBhbGlnbi1pdGVtcy1jZW50ZXJcbiAgICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudC1lbmRcbiAgICAgICAgICAgICAgICAgIHB4LTBcbiAgICAgICAgICAgICAgICAgIHNtYWxsXG4gICAgICAgICAgICAgICAgICB3ZC0xMDBcbiAgICAgICAgICAgICAgICAiLGF0dHJzOnsidGl0bGUiOiJDbGlxdWUgYXF1aSBwYXJhIGVkaXRhciBzdWFzIGltYWdlbnMifSxvbjp7ImNsaWNrIjpmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0ub3BlbkVkaXRJbWFnZSgpfX19LFtfYygnc3Bhbicse3N0YXRpY0NsYXNzOiJtYXRlcmlhbC1pY29ucyBtci0xIGZ0LTE4In0sW192bS5fdigibW9kZV9lZGl0IildKSxfYygnc3Bhbicse3N0YXRpY0NsYXNzOiJidG4tZWRpdC10ZXh0In0sW192bS5fdigiRWRpdGFyIildKV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoiXG4gICAgICAgICAgICAgICAgICBkLWZsZXhcbiAgICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudC1iZXR3ZWVuXG4gICAgICAgICAgICAgICAgICBhbGlnbi1pdGVtcy1jZW50ZXJcbiAgICAgICAgICAgICAgICAgIG1iLTJcbiAgICAgICAgICAgICAgICAgIGNsaWNrXG4gICAgICAgICAgICAgICAgICB3ZC0xMDBcbiAgICAgICAgICAgICAgICAifSxfdm0uX2woKF92bS5tdWx0aXBsZUltYWdlcyksZnVuY3Rpb24oaXRlbSxpbmRleCl7cmV0dXJuIF9jKCdkaXYnLHtrZXk6aW5kZXgsc3RhdGljQ2xhc3M6ImltZy1tdWx0LWNvbnRlbnQgbXktMSIsY2xhc3M6ewogICAgICAgICAgICAgICAgICAgICdhY3RpdmUtaW1nJzogX3ZtLnByb2R1Y3RTZWxlY3RlZC5pbWFnZV9saXN0W2luZGV4XQogICAgICAgICAgICAgICAgICAgICAgPyBfdm0uc2VsZWN0ZWRJbWFnZSA9PT0KICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnByb2R1Y3RTZWxlY3RlZC5pbWFnZV9saXN0W2luZGV4XS5pbWFnZV91cmwKICAgICAgICAgICAgICAgICAgICAgIDogZmFsc2UsCiAgICAgICAgICAgICAgICAgIH19LFsoIV92bS5wcm9kdWN0U2VsZWN0ZWQuaW1hZ2VfbGlzdFtpbmRleF0pP19jKCdhJyx7c3RhdGljQ2xhc3M6IlxuICAgICAgICAgICAgICAgICAgICAgIGltZy1tdWx0LWFkZFxuICAgICAgICAgICAgICAgICAgICAgIGQtZmxleFxuICAgICAgICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zLWNlbnRlclxuICAgICAgICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudC1jZW50ZXJcbiAgICAgICAgICAgICAgICAgICAgIixvbjp7ImNsaWNrIjpmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0ub3BlbklucHV0KAogICAgICAgICAgICAgICAgICAgICAgICBfdm0ucHJvZHVjdFNlbGVjdGVkLmltYWdlX2xpc3QubGVuZ3RoID8gaW5kZXggKyAxIDogMQogICAgICAgICAgICAgICAgICAgICAgKX19fSxbX2MoJ2ltZycse2F0dHJzOnsic3JjIjpyZXF1aXJlKCJAL2Fzc2V0cy9pbWFnZXMvYWRkLWEtcGhvdG8uc3ZnIiksImFsdCI6Ik11bHRpcGxhcyJ9fSldKTpfdm0uX2UoKSwoX3ZtLnByb2R1Y3RTZWxlY3RlZC5pbWFnZV9saXN0W2luZGV4XSk/W19jKCdhJyx7b246eyJjbGljayI6ZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLnNldFZpZXdJbWFnZSgKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucHJvZHVjdFNlbGVjdGVkLmltYWdlX2xpc3RbaW5kZXhdLmltYWdlX3VybAogICAgICAgICAgICAgICAgICAgICAgICApfX19LFtfYygnaW1nJyx7c3RhdGljQ2xhc3M6ImltZy1tdWx0aXBsYXMiLGF0dHJzOnsiYWx0IjoiSW1hZ2VtIGRvIFByb2R1dG8iLCJ0aXRsZSI6X3ZtLnByb2R1Y3RTZWxlY3RlZC5pbWFnZV9saXN0W2luZGV4XS5kZXNjcmlwdGlvbiwic3JjIjpfdm0ucHJvZHVjdFNlbGVjdGVkLmltYWdlX2xpc3RbaW5kZXhdLmltYWdlX3VybH19KV0pXTpfdm0uX2UoKV0sMil9KSwwKV0pXSksKF92bS5zaG93RWRpdFByb2R1Y3QpP19jKCdkaXYnLHtzdGF0aWNDbGFzczoiXG4gICAgICAgICAgICAgIGNhZHByb2RfX3VwbG9hZEltYWdlX19wYWdlXG4gICAgICAgICAgICAgIGRlc2t0b3BcbiAgICAgICAgICAgICAgYm9yZGVyLWxpZ2h0LWdyYXkgYm9yZGVyLXJhZGl1cy02XG4gICAgICAgICAgICAgIHAtMlxuICAgICAgICAgICAgICBtdC0zXG4gICAgICAgICAgICAgIHdkLTEwMFxuICAgICAgICAgICAgIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczoiXG4gICAgICAgICAgICAgICAgY2FkcHJvZF9fcXVlc3Rpb25zLS10b2dnbGVcbiAgICAgICAgICAgICAgICBkZXNrdG9wXG4gICAgICAgICAgICAgICAgZC1mbGV4XG4gICAgICAgICAgICAgICAgZmxleC1yb3ctcmV2ZXJzZVxuICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudC1iZXR3ZWVuXG4gICAgICAgICAgICAgICJ9LFtfYygnbGFiZWwnLHtzdGF0aWNDbGFzczoic3dpdGNoIG0tMCJ9LFtfYygnaW5wdXQnLHtkaXJlY3RpdmVzOlt7bmFtZToibW9kZWwiLHJhd05hbWU6InYtbW9kZWwiLHZhbHVlOihfdm0uaXNQdWJsaXNoZWQpLGV4cHJlc3Npb246ImlzUHVibGlzaGVkIn1dLGF0dHJzOnsidHlwZSI6ImNoZWNrYm94IiwiaWQiOiJwYXVzZSJ9LGRvbVByb3BzOnsiY2hlY2tlZCI6QXJyYXkuaXNBcnJheShfdm0uaXNQdWJsaXNoZWQpP192bS5faShfdm0uaXNQdWJsaXNoZWQsbnVsbCk+LTE6KF92bS5pc1B1Ymxpc2hlZCl9LG9uOnsiY2hhbmdlIjpbZnVuY3Rpb24oJGV2ZW50KXt2YXIgJCRhPV92bS5pc1B1Ymxpc2hlZCwkJGVsPSRldmVudC50YXJnZXQsJCRjPSQkZWwuY2hlY2tlZD8odHJ1ZSk6KGZhbHNlKTtpZihBcnJheS5pc0FycmF5KCQkYSkpe3ZhciAkJHY9bnVsbCwkJGk9X3ZtLl9pKCQkYSwkJHYpO2lmKCQkZWwuY2hlY2tlZCl7JCRpPDAmJihfdm0uaXNQdWJsaXNoZWQ9JCRhLmNvbmNhdChbJCR2XSkpfWVsc2V7JCRpPi0xJiYoX3ZtLmlzUHVibGlzaGVkPSQkYS5zbGljZSgwLCQkaSkuY29uY2F0KCQkYS5zbGljZSgkJGkrMSkpKX19ZWxzZXtfdm0uaXNQdWJsaXNoZWQ9JCRjfX0sZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLm9wZW5QdWJsaXNoZWRNb2RhbCgpfV19fSksX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczoic2xpZGVyIHJvdW5kIn0pXSksX2MoJ2xhYmVsJyx7c3RhdGljQ2xhc3M6Im0tMCBjbGljayIsYXR0cnM6eyJmb3IiOiJwYXVzZSJ9fSxbX3ZtLl92KCIgIitfdm0uX3MoX3ZtLnByb2R1Y3RTZWxlY3RlZC5pc19wdWJsaXNoZWQgPyAiUGF1c2FyIGFuw7puY2lvIiA6ICJSZXRvbWFyIGFuw7puY2lvIikrIiAiKV0pXSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJjYWRwcm9kX19xdWVzdGlvbnMtLWRlbGV0ZV9kZXNrdG9wIGRlc2t0b3AgbXQtMyJ9LFtfYygnYScse3N0YXRpY0NsYXNzOiJcbiAgICAgICAgICAgICAgICAgIGNhZHByb2RfX3F1ZXN0aW9ucy0tZGVsZXRlXG4gICAgICAgICAgICAgICAgICBkLWZsZXhcbiAgICAgICAgICAgICAgICAgIGZsZXgtcm93LXJldmVyc2VcbiAgICAgICAgICAgICAgICAgIGp1c3RpZnktY29udGVudC1iZXR3ZWVuXG4gICAgICAgICAgICAgICAgICBhbGlnbi1pdGVtcy1jZW50ZXJcbiAgICAgICAgICAgICAgICAiLG9uOnsiY2xpY2siOmZ1bmN0aW9uKCRldmVudCl7cmV0dXJuIF92bS5vcGVuTW9kYWxEZWxldGUoX3ZtLnByb2R1Y3RTZWxlY3RlZCl9fX0sW19jKCdzcGFuJyx7c3RhdGljQ2xhc3M6Im1hdGVyaWFsLWljb25zIn0sW192bS5fdigiZGVsZXRlIildKSxfYygnc3Bhbicse3N0YXRpY0NsYXNzOiJidG4tZGVsZXRlLXRleHQifSxbX3ZtLl92KCJEZWxldGFyIildKV0pXSldKTpfdm0uX2UoKV0pLF9jKCdzZWN0aW9uJyx7c3RhdGljQ2xhc3M6ImNvbC1sZy04IGNvbC1zbS0xMiBwLTAgZm9ybS1jYWRQcm9kIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczoicm93In0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczoiY29sLTEyIn0sW19jKCdzZWxlY3QnLHtkaXJlY3RpdmVzOlt7bmFtZToibW9kZWwiLHJhd05hbWU6InYtbW9kZWwiLHZhbHVlOihfdm0uY2F0ZWdvcnlHdWlkKSxleHByZXNzaW9uOiJjYXRlZ29yeUd1aWQifV0sc3RhdGljQ2xhc3M6ImZvcm0tY29udHJvbCBjdXN0b20tc2VsZWN0IixjbGFzczp7CiAgICAgICAgICAgICAgICAgICdpcy1pbnZhbGlkJzogIV92bS5oYXNDYXRlZ29yeVNlbGVjdGVkLAogICAgICAgICAgICAgICAgICAnaXMtdmFsaWQnOiBfdm0uaGFzQ2F0ZWdvcnlTZWxlY3RlZCAmJiBfdm0uY2F0ZWdvcnlHdWlkLAogICAgICAgICAgICAgICAgfSxhdHRyczp7Im5hbWUiOiJjYXRlZ29yeSIsImlkIjoiY2F0ZWdvcnkiLCJhcmlhLWRlc2NyaWJlZGJ5IjoiY2F0ZWdvcnlIZWxwIiwiYXJpYS1wbGFjZWhvbGRlciI6IkNhdGVnb3JpYSIsImRpc2FibGVkIjpfdm0uc2hvd0VkaXRQcm9kdWN0ICYmIF92bS5jYXRlZ29yeVNlbGVjdGVkLnZhcmlhbnRfc3RhdHVzfSxvbjp7ImNoYW5nZSI6W2Z1bmN0aW9uKCRldmVudCl7dmFyICQkc2VsZWN0ZWRWYWwgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoJGV2ZW50LnRhcmdldC5vcHRpb25zLGZ1bmN0aW9uKG8pe3JldHVybiBvLnNlbGVjdGVkfSkubWFwKGZ1bmN0aW9uKG8pe3ZhciB2YWwgPSAiX3ZhbHVlIiBpbiBvID8gby5fdmFsdWUgOiBvLnZhbHVlO3JldHVybiB2YWx9KTsgX3ZtLmNhdGVnb3J5R3VpZD0kZXZlbnQudGFyZ2V0Lm11bHRpcGxlID8gJCRzZWxlY3RlZFZhbCA6ICQkc2VsZWN0ZWRWYWxbMF19LGZ1bmN0aW9uKCRldmVudCl7cmV0dXJuIF92bS5zZWxlY3RlZENhdGVnb3J5KCl9XX19LFtfYygnb3B0Z3JvdXAnLHthdHRyczp7ImxhYmVsIjoiQ2F0ZWdvcmlhcyJ9fSxbX2MoJ29wdGlvbicse3N0YXRpY0NsYXNzOiJ0ZXh0LW11dGVkIHNlbGVjdC1zaXplIixhdHRyczp7ImRpc2FibGVkIjoiIiwidmFsdWUiOiIifX0sW192bS5fdigiIEVzY29saGEgdW1hIENhdGVnb3JpYSAiKV0pLF92bS5fbCgoX3ZtLmNhdGVnb3JpZXMpLGZ1bmN0aW9uKGNhdGVnb3J5KXtyZXR1cm4gX2MoJ29wdGlvbicse2NsYXNzOnsKICAgICAgICAgICAgICAgICAgICAgIG5vdF9zZWxlY3RhYmxlOgogICAgICAgICAgICAgICAgICAgICAgICBfdm0uc2hvd0VkaXRQcm9kdWN0ICYmCiAgICAgICAgICAgICAgICAgICAgICAgICFfdm0uY2F0ZWdvcnlTZWxlY3RlZC52YXJpYW50X3N0YXR1cyAmJgogICAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeS52YXJpYW50X3N0YXR1cywKICAgICAgICAgICAgICAgICAgICB9LGF0dHJzOnsiZGlzYWJsZWQiOl92bS5zaG93RWRpdFByb2R1Y3QgJiYKICAgICAgICAgICAgICAgICAgICAgICFfdm0uY2F0ZWdvcnlTZWxlY3RlZC52YXJpYW50X3N0YXR1cyAmJgogICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnkudmFyaWFudF9zdGF0dXN9LGRvbVByb3BzOnsidmFsdWUiOmNhdGVnb3J5Lmd1aWR9fSxbX3ZtLl92KCIgIitfdm0uX3MoY2F0ZWdvcnkubmFtZSkrIiAiKV0pfSldLDIpXSksKCFfdm0uc2hvd0NyZWF0ZVNlcnZpY2UpP19jKCdzbWFsbCcse3N0YXRpY0NsYXNzOiJmb3JtLXRleHQgaW5mby1mb3JtIG15LTEiLGNsYXNzOnsKICAgICAgICAgICAgICAgICAgJ2ludmFsaWQtZmVlZGJhY2snOiBfdm0ucmVzcG9uc2VFcnJvci5jYXRlZ29yeSAmJiAhX3ZtLmNhdGVnb3J5R3VpZCwKICAgICAgICAgICAgICAgICAgJ3ZhbGlkLWZlZWRiYWNrJzogX3ZtLnByb2R1Y3RTZWxlY3RlZC5jYXRlZ29yeSwKICAgICAgICAgICAgICAgIH0sYXR0cnM6eyJpZCI6ImNhdGVnb3J5SGVscCJ9fSxbX3ZtLl92KCIgIitfdm0uX3MoX3ZtLnJlc3BvbnNlRXJyb3IuY2F0ZWdvcnkgJiYgIV92bS5jYXRlZ29yeUd1aWQgPyBfdm0ucmVzcG9uc2VFcnJvci5jYXRlZ29yeSA6ICJFc2NvbGhhIGEgY2F0ZWdvcmlhIGRvIHNldSBQUk9EVVRPLiIpKyIgIildKTpfdm0uX2UoKSwoX3ZtLnNob3dDcmVhdGVTZXJ2aWNlKT9fYygnc21hbGwnLHtzdGF0aWNDbGFzczoiZm9ybS10ZXh0IGluZm8tZm9ybSBteS0xIixjbGFzczp7CiAgICAgICAgICAgICAgICAgICdpbnZhbGlkLWZlZWRiYWNrJzogX3ZtLnJlc3BvbnNlRXJyb3IuY2F0ZWdvcnkgJiYgIV92bS5jYXRlZ29yeUd1aWQsCiAgICAgICAgICAgICAgICAgICd2YWxpZC1mZWVkYmFjayc6IF92bS5wcm9kdWN0U2VsZWN0ZWQuY2F0ZWdvcnksCiAgICAgICAgICAgICAgICB9LGF0dHJzOnsiaWQiOiJjYXRlZ29yeUhlbHAifX0sW192bS5fdigiICIrX3ZtLl9zKF92bS5yZXNwb25zZUVycm9yLmNhdGVnb3J5ICYmICFfdm0uY2F0ZWdvcnlHdWlkID8gX3ZtLnJlc3BvbnNlRXJyb3IuY2F0ZWdvcnkgOiAiRXNjb2xoYSBhIGNhdGVnb3JpYSBkbyBzZXUgU0VSVknDh08uIikrIiAiKV0pOl92bS5fZSgpXSksKCFfdm0uc2hvd0NyZWF0ZVNlcnZpY2UpP19jKCdkaXYnLHtzdGF0aWNDbGFzczoiY29sLTEyIn0sW19jKCdpbnB1dCcse2RpcmVjdGl2ZXM6W3tuYW1lOiJtb2RlbCIscmF3TmFtZToidi1tb2RlbCIsdmFsdWU6KF92bS5wcm9kdWN0U2VsZWN0ZWQubmFtZSksZXhwcmVzc2lvbjoicHJvZHVjdFNlbGVjdGVkLm5hbWUifV0sc3RhdGljQ2xhc3M6ImZvcm0tY29udHJvbCIsY2xhc3M6ewogICAgICAgICAgICAgICAgICAnaXMtaW52YWxpZCc6CiAgICAgICAgICAgICAgICAgICAgKF92bS5yZXNwb25zZUVycm9yLm5hbWUgJiYgIV92bS5wcm9kdWN0U2VsZWN0ZWQubmFtZSkgfHwKICAgICAgICAgICAgICAgICAgICBfdm0ucmVzcG9uc2VFcnJvci5pc05hbWUsCiAgICAgICAgICAgICAgICAgICdpcy12YWxpZCc6IF92bS5wcm9kdWN0U2VsZWN0ZWQubmFtZSwKICAgICAgICAgICAgICAgIH0sYXR0cnM6eyJuYW1lIjoibmFtZSIsInR5cGUiOiJ0ZXh0IiwiYXJpYS1kZXNjcmliZWRieSI6Im5hbWVIZWxwIiwicGxhY2Vob2xkZXIiOiJOb21lIGRvIHByb2R1dG8qIn0sZG9tUHJvcHM6eyJ2YWx1ZSI6KF92bS5wcm9kdWN0U2VsZWN0ZWQubmFtZSl9LG9uOnsiaW5wdXQiOmZ1bmN0aW9uKCRldmVudCl7aWYoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpeyByZXR1cm47IH1fdm0uJHNldChfdm0ucHJvZHVjdFNlbGVjdGVkLCAibmFtZSIsICRldmVudC50YXJnZXQudmFsdWUpfX19KSxfYygnc21hbGwnLHtzdGF0aWNDbGFzczoiZm9ybS10ZXh0IGluZm8tZm9ybSBteS0xIixjbGFzczp7CiAgICAgICAgICAgICAgICAgICdpbnZhbGlkLWZlZWRiYWNrJzoKICAgICAgICAgICAgICAgICAgICAoX3ZtLnJlc3BvbnNlRXJyb3IubmFtZSAmJiAhX3ZtLnByb2R1Y3RTZWxlY3RlZC5uYW1lKSB8fAogICAgICAgICAgICAgICAgICAgIF92bS5yZXNwb25zZUVycm9yLmlzTmFtZSwKICAgICAgICAgICAgICAgICAgJ3ZhbGlkLWZlZWRiYWNrJzogX3ZtLnByb2R1Y3RTZWxlY3RlZC5uYW1lLAogICAgICAgICAgICAgICAgfSxhdHRyczp7ImlkIjoibmFtZUhlbHAifX0sW192bS5fdigiICIrX3ZtLl9zKChfdm0ucmVzcG9uc2VFcnJvci5uYW1lICYmICFfdm0ucHJvZHVjdFNlbGVjdGVkLm5hbWUpIHx8IF92bS5yZXNwb25zZUVycm9yLmlzTmFtZSA/IF92bS5yZXNwb25zZUVycm9yLm5hbWUgOiAiQ29sb3F1ZSBvIG5vbWUgY29tbyBzZXUgUFJPRFVUTyBzZXLDoSBhcHJlc2VudGFkbyAtIEV4OiBDYW1pc2V0YSBlc3RhbXBhZGEgcm94YSwgYm9sbyBkZSBjaG9jb2xhdGUsIGV0Yy4iKSsiICIpXSldKTpfdm0uX2UoKSwoX3ZtLnNob3dDcmVhdGVTZXJ2aWNlKT9fYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImNvbC0xMiJ9LFtfYygnaW5wdXQnLHtkaXJlY3RpdmVzOlt7bmFtZToibW9kZWwiLHJhd05hbWU6InYtbW9kZWwiLHZhbHVlOihfdm0ucHJvZHVjdFNlbGVjdGVkLm5hbWUpLGV4cHJlc3Npb246InByb2R1Y3RTZWxlY3RlZC5uYW1lIn1dLHN0YXRpY0NsYXNzOiJmb3JtLWNvbnRyb2wiLGNsYXNzOnsKICAgICAgICAgICAgICAgICAgJ2lzLWludmFsaWQnOgogICAgICAgICAgICAgICAgICAgIChfdm0ucmVzcG9uc2VFcnJvci5uYW1lICYmICFfdm0ucHJvZHVjdFNlbGVjdGVkLm5hbWUpIHx8CiAgICAgICAgICAgICAgICAgICAgX3ZtLnJlc3BvbnNlRXJyb3IuaXNOYW1lLAogICAgICAgICAgICAgICAgICAnaXMtdmFsaWQnOiBfdm0ucHJvZHVjdFNlbGVjdGVkLm5hbWUsCiAgICAgICAgICAgICAgICB9LGF0dHJzOnsibmFtZSI6Im5hbWUiLCJ0eXBlIjoidGV4dCIsImFyaWEtZGVzY3JpYmVkYnkiOiJuYW1lSGVscCIsInBsYWNlaG9sZGVyIjoiTm9tZSBkbyBzZXJ2acOnbyoifSxkb21Qcm9wczp7InZhbHVlIjooX3ZtLnByb2R1Y3RTZWxlY3RlZC5uYW1lKX0sb246eyJpbnB1dCI6ZnVuY3Rpb24oJGV2ZW50KXtpZigkZXZlbnQudGFyZ2V0LmNvbXBvc2luZyl7IHJldHVybjsgfV92bS4kc2V0KF92bS5wcm9kdWN0U2VsZWN0ZWQsICJuYW1lIiwgJGV2ZW50LnRhcmdldC52YWx1ZSl9fX0pLF9jKCdzbWFsbCcse3N0YXRpY0NsYXNzOiJmb3JtLXRleHQgaW5mby1mb3JtIG15LTEiLGNsYXNzOnsKICAgICAgICAgICAgICAgICAgJ2ludmFsaWQtZmVlZGJhY2snOgogICAgICAgICAgICAgICAgICAgIChfdm0ucmVzcG9uc2VFcnJvci5uYW1lICYmICFfdm0ucHJvZHVjdFNlbGVjdGVkLm5hbWUpIHx8CiAgICAgICAgICAgICAgICAgICAgX3ZtLnJlc3BvbnNlRXJyb3IuaXNOYW1lLAogICAgICAgICAgICAgICAgICAndmFsaWQtZmVlZGJhY2snOiBfdm0ucHJvZHVjdFNlbGVjdGVkLm5hbWUsCiAgICAgICAgICAgICAgICB9LGF0dHJzOnsiaWQiOiJuYW1lSGVscCJ9fSxbX3ZtLl92KCIgIitfdm0uX3MoKF92bS5yZXNwb25zZUVycm9yLm5hbWUgJiYgIV92bS5wcm9kdWN0U2VsZWN0ZWQubmFtZSkgfHwgX3ZtLnJlc3BvbnNlRXJyb3IuaXNOYW1lID8gX3ZtLnJlc3BvbnNlRXJyb3IubmFtZSA6ICJJbnNpcmEgbyBub21lIHF1ZSBtZWxob3IgZGVzY3JldmUgbyBzZXJ2acOnbyBxdWUgc2Vyw6EgcHJlc3RhZG8iKSsiICIpXSldKTpfdm0uX2UoKSwoIV92bS5zaG93Q3JlYXRlU2VydmljZSk/X2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJjb2wtMTIifSxbX2MoJ3RleHRhcmVhJyx7ZGlyZWN0aXZlczpbe25hbWU6Im1vZGVsIixyYXdOYW1lOiJ2LW1vZGVsIix2YWx1ZTooX3ZtLnByb2R1Y3RTZWxlY3RlZC5kZXNjcmlwdGlvbiksZXhwcmVzc2lvbjoicHJvZHVjdFNlbGVjdGVkLmRlc2NyaXB0aW9uIn1dLHN0YXRpY0NsYXNzOiJmb3JtLWNvbnRyb2wgdGV4dC1kZXNjcmlwdGlvbiIsY2xhc3M6ewogICAgICAgICAgICAgICAgICAnaXMtaW52YWxpZCc6CiAgICAgICAgICAgICAgICAgICAgX3ZtLnJlc3BvbnNlRXJyb3IuZGVzY3JpcHRpb24gJiYgIV92bS5wcm9kdWN0U2VsZWN0ZWQuZGVzY3JpcHRpb24sCiAgICAgICAgICAgICAgICAgICdpcy12YWxpZCc6IF92bS5wcm9kdWN0U2VsZWN0ZWQuZGVzY3JpcHRpb24sCiAgICAgICAgICAgICAgICB9LGF0dHJzOnsibmFtZSI6ImRlc2NyaXB0aW9uIiwiaWQiOiJkZXNjcmlwdGlvbiIsImNvbHMiOiIzMCIsInJvd3MiOiIxMCIsIm1heGxlbmd0aCI6IjUwMCIsImFyaWEtZGVzY3JpYmVkYnkiOiJkZXNjcmlwdGlvbkhlbHAiLCJwbGFjZWhvbGRlciI6IkRlc2NyacOnw6NvIGRvIHByb2R1dG8qIn0sZG9tUHJvcHM6eyJ2YWx1ZSI6KF92bS5wcm9kdWN0U2VsZWN0ZWQuZGVzY3JpcHRpb24pfSxvbjp7ImlucHV0IjpmdW5jdGlvbigkZXZlbnQpe2lmKCRldmVudC50YXJnZXQuY29tcG9zaW5nKXsgcmV0dXJuOyB9X3ZtLiRzZXQoX3ZtLnByb2R1Y3RTZWxlY3RlZCwgImRlc2NyaXB0aW9uIiwgJGV2ZW50LnRhcmdldC52YWx1ZSl9fX0pLF9jKCdzbWFsbCcse3N0YXRpY0NsYXNzOiJcbiAgICAgICAgICAgICAgICAgIHRleHQtbXV0ZWRcbiAgICAgICAgICAgICAgICAgIGluZm8tZm9ybVxuICAgICAgICAgICAgICAgICAgZm9udC13ZWlnaHQtYm9sZFxuICAgICAgICAgICAgICAgICAgdGV4dC1yaWdodFxuICAgICAgICAgICAgICAgICAgY29sLXNtLTEyIGNvbC1tZC00XG4gICAgICAgICAgICAgICAgICBwLTBcbiAgICAgICAgICAgICAgICAgIGZsb2F0LXJpZ2h0XG4gICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbi1jb3VudFxuICAgICAgICAgICAgICAgICJ9LFtfdm0uX3YoIiAiK192bS5fcyg1MDAgLSBfdm0ucHJvZHVjdFNlbGVjdGVkLmRlc2NyaXB0aW9uLmxlbmd0aCkrIiBjYXJhY3RlcmVzIHJlc3RhbnRlcyAiKV0pLF9jKCdzbWFsbCcse3N0YXRpY0NsYXNzOiJcbiAgICAgICAgICAgICAgICAgIGZvcm0tdGV4dFxuICAgICAgICAgICAgICAgICAgaW5mby1mb3JtXG4gICAgICAgICAgICAgICAgICBjb2wtc20tMTIgY29sLW1kLThcbiAgICAgICAgICAgICAgICAgIG15LTFcbiAgICAgICAgICAgICAgICAgIHAtMFxuICAgICAgICAgICAgICAgICAgZmxvYXQtbGVmdFxuICAgICAgICAgICAgICAgICIsY2xhc3M6ewogICAgICAgICAgICAgICAgICAnaW52YWxpZC1mZWVkYmFjayc6CiAgICAgICAgICAgICAgICAgICAgX3ZtLnJlc3BvbnNlRXJyb3IuZGVzY3JpcHRpb24gJiYgIV92bS5wcm9kdWN0U2VsZWN0ZWQuZGVzY3JpcHRpb24sCiAgICAgICAgICAgICAgICAgICd2YWxpZC1mZWVkYmFjayc6IF92bS5wcm9kdWN0U2VsZWN0ZWQuZGVzY3JpcHRpb24sCiAgICAgICAgICAgICAgICB9LGF0dHJzOnsiaWQiOiJkZXNjcmlwdGlvbkhlbHAifX0sW192bS5fdigiICIrX3ZtLl9zKF92bS5yZXNwb25zZUVycm9yLmRlc2NyaXB0aW9uICYmICFfdm0ucHJvZHVjdFNlbGVjdGVkLmRlc2NyaXB0aW9uID8gX3ZtLnJlc3BvbnNlRXJyb3IuZGVzY3JpcHRpb24gOiAiQ29udGUgb3MgZGV0YWxoZXMgZG8gc2V1IFBST0RVVE8sIHF1YWlzIG9zIG1hdGVyaWFpcyB1c2Fkb3MsIGluZ3JlZGllbnRlcywgZXRjLiIpKyIgIildKV0pOl92bS5fZSgpLChfdm0uc2hvd0NyZWF0ZVNlcnZpY2UpP19jKCdkaXYnLHtzdGF0aWNDbGFzczoiY29sLTEyIn0sW19jKCd0ZXh0YXJlYScse2RpcmVjdGl2ZXM6W3tuYW1lOiJtb2RlbCIscmF3TmFtZToidi1tb2RlbCIsdmFsdWU6KF92bS5wcm9kdWN0U2VsZWN0ZWQuZGVzY3JpcHRpb24pLGV4cHJlc3Npb246InByb2R1Y3RTZWxlY3RlZC5kZXNjcmlwdGlvbiJ9XSxzdGF0aWNDbGFzczoiZm9ybS1jb250cm9sIHRleHQtZGVzY3JpcHRpb24iLGNsYXNzOnsKICAgICAgICAgICAgICAgICAgJ2lzLWludmFsaWQnOgogICAgICAgICAgICAgICAgICAgIF92bS5yZXNwb25zZUVycm9yLmRlc2NyaXB0aW9uICYmICFfdm0ucHJvZHVjdFNlbGVjdGVkLmRlc2NyaXB0aW9uLAogICAgICAgICAgICAgICAgICAnaXMtdmFsaWQnOiBfdm0ucHJvZHVjdFNlbGVjdGVkLmRlc2NyaXB0aW9uLAogICAgICAgICAgICAgICAgfSxhdHRyczp7Im5hbWUiOiJkZXNjcmlwdGlvbiIsImlkIjoiZGVzY3JpcHRpb24iLCJjb2xzIjoiMzAiLCJyb3dzIjoiMTAiLCJtYXhsZW5ndGgiOiI1MDAiLCJhcmlhLWRlc2NyaWJlZGJ5IjoiZGVzY3JpcHRpb25IZWxwIiwicGxhY2Vob2xkZXIiOiJEZXNjcmnDp8OjbyBkbyBzZXJ2acOnbyoifSxkb21Qcm9wczp7InZhbHVlIjooX3ZtLnByb2R1Y3RTZWxlY3RlZC5kZXNjcmlwdGlvbil9LG9uOnsiaW5wdXQiOmZ1bmN0aW9uKCRldmVudCl7aWYoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpeyByZXR1cm47IH1fdm0uJHNldChfdm0ucHJvZHVjdFNlbGVjdGVkLCAiZGVzY3JpcHRpb24iLCAkZXZlbnQudGFyZ2V0LnZhbHVlKX19fSksX2MoJ3NtYWxsJyx7c3RhdGljQ2xhc3M6IlxuICAgICAgICAgICAgICAgICAgdGV4dC1tdXRlZFxuICAgICAgICAgICAgICAgICAgaW5mby1mb3JtXG4gICAgICAgICAgICAgICAgICBmb250LXdlaWdodC1ib2xkXG4gICAgICAgICAgICAgICAgICB0ZXh0LXJpZ2h0XG4gICAgICAgICAgICAgICAgICBjb2wtc20tMTIgY29sLW1kLTRcbiAgICAgICAgICAgICAgICAgIHAtMFxuICAgICAgICAgICAgICAgICAgZmxvYXQtcmlnaHRcbiAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uLWNvdW50XG4gICAgICAgICAgICAgICAgIn0sW192bS5fdigiICIrX3ZtLl9zKDUwMCAtIF92bS5wcm9kdWN0U2VsZWN0ZWQuZGVzY3JpcHRpb24ubGVuZ3RoKSsiIGNhcmFjdGVyZXMgcmVzdGFudGVzICIpXSksX2MoJ3NtYWxsJyx7c3RhdGljQ2xhc3M6IlxuICAgICAgICAgICAgICAgICAgZm9ybS10ZXh0XG4gICAgICAgICAgICAgICAgICBpbmZvLWZvcm1cbiAgICAgICAgICAgICAgICAgIGNvbC1zbS0xMiBjb2wtbWQtOFxuICAgICAgICAgICAgICAgICAgbXktMVxuICAgICAgICAgICAgICAgICAgcC0wXG4gICAgICAgICAgICAgICAgICBmbG9hdC1sZWZ0XG4gICAgICAgICAgICAgICAgIixjbGFzczp7CiAgICAgICAgICAgICAgICAgICdpbnZhbGlkLWZlZWRiYWNrJzoKICAgICAgICAgICAgICAgICAgICBfdm0ucmVzcG9uc2VFcnJvci5kZXNjcmlwdGlvbiAmJiAhX3ZtLnByb2R1Y3RTZWxlY3RlZC5kZXNjcmlwdGlvbiwKICAgICAgICAgICAgICAgICAgJ3ZhbGlkLWZlZWRiYWNrJzogX3ZtLnByb2R1Y3RTZWxlY3RlZC5kZXNjcmlwdGlvbiwKICAgICAgICAgICAgICAgIH0sYXR0cnM6eyJpZCI6ImRlc2NyaXB0aW9uSGVscCJ9fSxbX3ZtLl92KCIgIitfdm0uX3MoX3ZtLnJlc3BvbnNlRXJyb3IuZGVzY3JpcHRpb24gJiYgIV92bS5wcm9kdWN0U2VsZWN0ZWQuZGVzY3JpcHRpb24gPyBfdm0ucmVzcG9uc2VFcnJvci5kZXNjcmlwdGlvbiA6ICJDb250ZSBvcyBkZXRhbGhlcyBkbyBxdWUgZXN0w6EgaW5jbHVzbyBlIG8gcXVlIG7Do28gZXN0w6Egbm8gc2VydmnDp28uIikrIiAiKV0pXSk6X3ZtLl9lKCksKAogICAgICAgICAgICAgICAgIV92bS5jYXRlZ29yeVNlbGVjdGVkLnZhcmlhbnRfc3RhdHVzIHx8CiAgICAgICAgICAgICAgICAoX3ZtLmNhdGVnb3J5U2VsZWN0ZWQudmFyaWFudF92YWx1ZSAmJgogICAgICAgICAgICAgICAgICBfdm0uY2F0ZWdvcnlTZWxlY3RlZC52YXJpYW50X3ZhbHVlLmxlbmd0aCA8IDApCiAgICAgICAgICAgICAgKT9bKCFfdm0uc2hvd0NyZWF0ZVNlcnZpY2UpP19jKCdkaXYnLHtzdGF0aWNDbGFzczoicm93IGNvbC0xMiBtLWF1dG8gcC0wIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczoiY29sLXNtLTEyIGNvbC1tZC00IG15LTEifSxbKF92bS5zaG93Q3JlYXRlUHJvZHVjdCk/X2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJcbiAgICAgICAgICAgICAgICAgICAgICBjdXN0b20tY29udHJvbCBjdXN0b20tY2hlY2tib3hcbiAgICAgICAgICAgICAgICAgICAgICBjaGVja2JveC1zZW1fdmFyaWFudGVcbiAgICAgICAgICAgICAgICAgICAgICBwLTBcbiAgICAgICAgICAgICAgICAgICAgIn0sW19jKCdpbnB1dCcse2RpcmVjdGl2ZXM6W3tuYW1lOiJtb2RlbCIscmF3TmFtZToidi1tb2RlbCIsdmFsdWU6KF92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1swXS5pc19za3VzKSxleHByZXNzaW9uOiJwcm9kdWN0U2VsZWN0ZWQuc2t1c1swXS5pc19za3VzIn1dLHN0YXRpY0NsYXNzOiJjdXN0b20tY29udHJvbC1pbnB1dCIsYXR0cnM6eyJ0eXBlIjoiY2hlY2tib3giLCJpZCI6ImRpc3Bvbml2ZWwifSxkb21Qcm9wczp7ImNoZWNrZWQiOkFycmF5LmlzQXJyYXkoX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzWzBdLmlzX3NrdXMpP192bS5faShfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbMF0uaXNfc2t1cyxudWxsKT4tMTooX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzWzBdLmlzX3NrdXMpfSxvbjp7ImNoYW5nZSI6ZnVuY3Rpb24oJGV2ZW50KXt2YXIgJCRhPV92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1swXS5pc19za3VzLCQkZWw9JGV2ZW50LnRhcmdldCwkJGM9JCRlbC5jaGVja2VkPyh0cnVlKTooZmFsc2UpO2lmKEFycmF5LmlzQXJyYXkoJCRhKSl7dmFyICQkdj1udWxsLCQkaT1fdm0uX2koJCRhLCQkdik7aWYoJCRlbC5jaGVja2VkKXskJGk8MCYmKF92bS4kc2V0KF92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1swXSwgImlzX3NrdXMiLCAkJGEuY29uY2F0KFskJHZdKSkpfWVsc2V7JCRpPi0xJiYoX3ZtLiRzZXQoX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzWzBdLCAiaXNfc2t1cyIsICQkYS5zbGljZSgwLCQkaSkuY29uY2F0KCQkYS5zbGljZSgkJGkrMSkpKSl9fWVsc2V7X3ZtLiRzZXQoX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzWzBdLCAiaXNfc2t1cyIsICQkYyl9fX19KSxfYygnbGFiZWwnLHtzdGF0aWNDbGFzczoiY3VzdG9tLWNvbnRyb2wtbGFiZWwiLGF0dHJzOnsiZm9yIjoiZGlzcG9uaXZlbCJ9fSxbX3ZtLl92KCJQcm9kdXRvIHRlbSBTS1U/IildKV0pOl92bS5fZSgpXSksKF92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1swXS5pc19za3VzICYmIF92bS5zaG93Q3JlYXRlUHJvZHVjdCk/X2MoJ2Rpdicse2NsYXNzOnsKICAgICAgICAgICAgICAgICAgICAnY29sLXNtLTEyIGNvbC1tZC04JzogX3ZtLnNob3dDcmVhdGVQcm9kdWN0LAogICAgICAgICAgICAgICAgICAgICdjb2wtMTInOiBfdm0uc2hvd0VkaXRQcm9kdWN0LAogICAgICAgICAgICAgICAgICB9fSxbX2MoJ2lucHV0Jyx7ZGlyZWN0aXZlczpbe25hbWU6Im1vZGVsIixyYXdOYW1lOiJ2LW1vZGVsLmxhenkiLHZhbHVlOihfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbMF0uY29kZSksZXhwcmVzc2lvbjoicHJvZHVjdFNlbGVjdGVkLnNrdXNbMF0uY29kZSIsbW9kaWZpZXJzOnsibGF6eSI6dHJ1ZX19XSxzdGF0aWNDbGFzczoiZm9ybS1jb250cm9sIixhdHRyczp7Im5hbWUiOiJjb2RlIiwidHlwZSI6InRleHQiLCJhcmlhLWRlc2NyaWJlZGJ5IjoiY29kZUhlbHAiLCJwbGFjZWhvbGRlciI6IlNLVSBkbyBQcm9kdXRvIiwiZGlzYWJsZWQiOiFfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbMF0uc3RhdHVzIHx8IF92bS5zaG93RWRpdFByb2R1Y3R9LGRvbVByb3BzOnsidmFsdWUiOihfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbMF0uY29kZSl9LG9uOnsiY2hhbmdlIjpmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0uJHNldChfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbMF0sICJjb2RlIiwgJGV2ZW50LnRhcmdldC52YWx1ZSl9fX0pLF9jKCdzbWFsbCcse3N0YXRpY0NsYXNzOiJmb3JtLXRleHQgdGV4dC1tdXRlZCBpbmZvLWZvcm0gbXktMSIsYXR0cnM6eyJpZCI6ImNvZGVIZWxwIn19LFtfdm0uX3YoIkVzdGUgbsOjbyDDqSB1bSBjYW1wbyBvYnJpZ2F0w7NyaW8uIildKV0pOl92bS5fZSgpXSk6X3ZtLl9lKCksKCFfdm0uc2hvd0NyZWF0ZVNlcnZpY2UpP1soIV92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1swXS5pbl9wcm9tb3Rpb24pP1tfYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImlucHV0LWdyb3VwIGNvbC0xMiJ9LFtfYygnaW5wdXQnLHtkaXJlY3RpdmVzOlt7bmFtZToibW9uZXkiLHJhd05hbWU6InYtbW9uZXkiLHZhbHVlOihfdm0ubW9uZXkpLGV4cHJlc3Npb246Im1vbmV5In0se25hbWU6Im1vZGVsIixyYXdOYW1lOiJ2LW1vZGVsLmxhenkiLHZhbHVlOihfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbMF0ub2xkX3ByaWNlKSxleHByZXNzaW9uOiJwcm9kdWN0U2VsZWN0ZWQuc2t1c1swXS5vbGRfcHJpY2UiLG1vZGlmaWVyczp7ImxhenkiOnRydWV9fV0sc3RhdGljQ2xhc3M6ImZvcm0tY29udHJvbCIsY2xhc3M6ewogICAgICAgICAgICAgICAgICAgICAgICAnaXMtaW52YWxpZCc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnJlc3BvbnNlRXJyb3IudmFyaWFudFZhbHVlICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnJlc3BvbnNlRXJyb3IudmFyaWFudFZhbHVlWzBdICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzWzBdLm9sZF9wcmljZSA9PT0gJ1IkIDAsMDAnLAogICAgICAgICAgICAgICAgICAgICAgICAnaXMtdmFsaWQnOgogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1swXS5vbGRfcHJpY2UgIT09ICdSJCAwLDAwJywKICAgICAgICAgICAgICAgICAgICAgIH0sYXR0cnM6eyJuYW1lIjoicHJpY2UiLCJ0eXBlIjoidGV4dCIsImFyaWEtZGVzY3JpYmVkYnkiOiJwcmljZUhlbHAiLCJwbGFjZWhvbGRlciI6IlByZcOnbyBkbyBwcm9kdXRvIn0sZG9tUHJvcHM6eyJ2YWx1ZSI6KF92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1swXS5vbGRfcHJpY2UpfSxvbjp7ImNoYW5nZSI6ZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLiRzZXQoX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzWzBdLCAib2xkX3ByaWNlIiwgJGV2ZW50LnRhcmdldC52YWx1ZSl9fX0pLF9jKCdzbWFsbCcse3N0YXRpY0NsYXNzOiJmb3JtLXRleHQgaW5mby1mb3JtIGNvbC0xMiBwLTAgbXktMSIsY2xhc3M6ewogICAgICAgICAgICAgICAgICAgICAgICAnaW52YWxpZC1mZWVkYmFjayc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnJlc3BvbnNlRXJyb3IudmFyaWFudFZhbHVlWzBdICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzWzBdLm9sZF9wcmljZSA9PT0gJ1IkIDAsMDAnLAogICAgICAgICAgICAgICAgICAgICAgICAndmFsaWQtZmVlZGJhY2snOgogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1swXS5vbGRfcHJpY2UgIT09ICdSJCAwLDAwJywKICAgICAgICAgICAgICAgICAgICAgIH0sYXR0cnM6eyJpZCI6InByaWNlSGVscCJ9fSxbX3ZtLl92KCIgIitfdm0uX3MoX3ZtLnJlc3BvbnNlRXJyb3IudmFyaWFudFZhbHVlICYmIF92bS5yZXNwb25zZUVycm9yLnZhcmlhbnRWYWx1ZVswXSAmJiBfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbMF0ub2xkX3ByaWNlID09PSAiUiQgMCwwMCIgPyBfdm0ucmVzcG9uc2VFcnJvci52YXJpYW50VmFsdWVbMF0gOiAiRGlnaXRlIG8gdmFsb3IgdW5pdMOhcmlvIGRvIFBST0RVVE8iKSsiICIpXSldKV06W19jKCdkaXYnLHtzdGF0aWNDbGFzczoiaW5wdXQtZ3JvdXAgY29sLWxnLTYgY29sLXNtLTEyIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczoiaW5wdXQtZ3JvdXAtcHJlcGVuZCJ9LFtfYygnc3Bhbicse3N0YXRpY0NsYXNzOiJpbnB1dC1ncm91cC10ZXh0In0sW192bS5fdigiRGUiKV0pXSksX2MoJ2lucHV0Jyx7ZGlyZWN0aXZlczpbe25hbWU6Im1vbmV5IixyYXdOYW1lOiJ2LW1vbmV5Iix2YWx1ZTooX3ZtLm1vbmV5KSxleHByZXNzaW9uOiJtb25leSJ9LHtuYW1lOiJtb2RlbCIscmF3TmFtZToidi1tb2RlbC5sYXp5Iix2YWx1ZTooX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzWzBdLm9sZF9wcmljZSksZXhwcmVzc2lvbjoicHJvZHVjdFNlbGVjdGVkLnNrdXNbMF0ub2xkX3ByaWNlIixtb2RpZmllcnM6eyJsYXp5Ijp0cnVlfX1dLHN0YXRpY0NsYXNzOiJmb3JtLWNvbnRyb2wgY29sLTEyIixjbGFzczp7CiAgICAgICAgICAgICAgICAgICAgICAgICdpcy1pbnZhbGlkJzoKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucmVzcG9uc2VFcnJvci52YXJpYW50VmFsdWUgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucmVzcG9uc2VFcnJvci52YXJpYW50VmFsdWVbMF0gJiYKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbMF0ub2xkX3ByaWNlID09PSAnUiQgMCwwMCcsCiAgICAgICAgICAgICAgICAgICAgICAgICdpcy12YWxpZCc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzWzBdLm9sZF9wcmljZSAhPT0gJ1IkIDAsMDAnLAogICAgICAgICAgICAgICAgICAgICAgfSxhdHRyczp7Im5hbWUiOiJvbGRQcmljZSIsInR5cGUiOiJ0ZXh0IiwiYXJpYS1kZXNjcmliZWRieSI6Im9sZFByaWNlSGVscCIsInBsYWNlaG9sZGVyIjoiUHJlw6dvIGRvIHByb2R1dG8ifSxkb21Qcm9wczp7InZhbHVlIjooX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzWzBdLm9sZF9wcmljZSl9LG9uOnsiY2hhbmdlIjpmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0uJHNldChfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbMF0sICJvbGRfcHJpY2UiLCAkZXZlbnQudGFyZ2V0LnZhbHVlKX19fSksX2MoJ3NtYWxsJyx7c3RhdGljQ2xhc3M6ImZvcm0tdGV4dCBpbmZvLWZvcm0gY29sLTEyIHAtMCBteS0xIixjbGFzczp7CiAgICAgICAgICAgICAgICAgICAgICAgICdpbnZhbGlkLWZlZWRiYWNrJzoKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucmVzcG9uc2VFcnJvci52YXJpYW50VmFsdWVbMF0gJiYKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbMF0ub2xkX3ByaWNlID09PSAnUiQgMCwwMCcsCiAgICAgICAgICAgICAgICAgICAgICAgICd2YWxpZC1mZWVkYmFjayc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzWzBdLm9sZF9wcmljZSAhPT0gJ1IkIDAsMDAnLAogICAgICAgICAgICAgICAgICAgICAgfSxhdHRyczp7ImlkIjoib2xkUHJpY2VIZWxwIn19LFtfdm0uX3YoIiAiK192bS5fcyhfdm0ucmVzcG9uc2VFcnJvci52YXJpYW50VmFsdWUgJiYgX3ZtLnJlc3BvbnNlRXJyb3IudmFyaWFudFZhbHVlWzBdICYmIF92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1swXS5vbGRfcHJpY2UgPT09ICJSJCAwLDAwIiA/IF92bS5yZXNwb25zZUVycm9yLnZhcmlhbnRWYWx1ZVswXSA6ICJEaWdpdGUgbyB2YWxvciB1bml0w6FyaW8gU0VNIFBST01Pw4fDg08gZG8gUFJPRFVUTyIpKyIgIildKV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoiaW5wdXQtZ3JvdXAgY29sLWxnLTYgY29sLXNtLTEyIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczoiaW5wdXQtZ3JvdXAtcHJlcGVuZCJ9LFtfYygnc3Bhbicse3N0YXRpY0NsYXNzOiJpbnB1dC1ncm91cC10ZXh0In0sW192bS5fdigiUG9yIildKV0pLF9jKCdpbnB1dCcse2RpcmVjdGl2ZXM6W3tuYW1lOiJtb25leSIscmF3TmFtZToidi1tb25leSIsdmFsdWU6KF92bS5tb25leSksZXhwcmVzc2lvbjoibW9uZXkifSx7bmFtZToibW9kZWwiLHJhd05hbWU6InYtbW9kZWwubGF6eSIsdmFsdWU6KF92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1swXS5uZXdfcHJpY2UpLGV4cHJlc3Npb246InByb2R1Y3RTZWxlY3RlZC5za3VzWzBdLm5ld19wcmljZSIsbW9kaWZpZXJzOnsibGF6eSI6dHJ1ZX19XSxzdGF0aWNDbGFzczoiZm9ybS1jb250cm9sIGNvbC0xMiIsY2xhc3M6ewogICAgICAgICAgICAgICAgICAgICAgICAnaXMtaW52YWxpZCc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnJlc3BvbnNlRXJyb3IudmFyaWFudFZhbHVlICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnJlc3BvbnNlRXJyb3IudmFyaWFudFZhbHVlWzBdICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzWzBdLm5ld19wcmljZSA9PT0gJ1IkIDAsMDAnLAogICAgICAgICAgICAgICAgICAgICAgICAnaXMtdmFsaWQnOgogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1swXS5uZXdfcHJpY2UgIT09ICdSJCAwLDAwJywKICAgICAgICAgICAgICAgICAgICAgIH0sYXR0cnM6eyJuYW1lIjoibmV3UHJpY2UiLCJ0eXBlIjoidGV4dCIsImFyaWEtZGVzY3JpYmVkYnkiOiJuZXdQcmljZUhlbHAiLCJwbGFjZWhvbGRlciI6IlByZcOnbyBkbyBwcm9kdXRvIn0sZG9tUHJvcHM6eyJ2YWx1ZSI6KF92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1swXS5uZXdfcHJpY2UpfSxvbjp7ImNoYW5nZSI6ZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLiRzZXQoX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzWzBdLCAibmV3X3ByaWNlIiwgJGV2ZW50LnRhcmdldC52YWx1ZSl9fX0pLF9jKCdzbWFsbCcse3N0YXRpY0NsYXNzOiJmb3JtLXRleHQgaW5mby1mb3JtIGNvbC0xMiBwLTAgbXktMSIsY2xhc3M6ewogICAgICAgICAgICAgICAgICAgICAgICAnaW52YWxpZC1mZWVkYmFjayc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnJlc3BvbnNlRXJyb3IudmFyaWFudFZhbHVlWzBdICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzWzBdLm5ld19wcmljZSA9PT0gJ1IkIDAsMDAnLAogICAgICAgICAgICAgICAgICAgICAgICAndmFsaWQtZmVlZGJhY2snOgogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1swXS5uZXdfcHJpY2UgIT09ICdSJCAwLDAwJywKICAgICAgICAgICAgICAgICAgICAgIH0sYXR0cnM6eyJpZCI6Im5ld1ByaWNlSGVscCJ9fSxbX3ZtLl92KCIgIitfdm0uX3MoX3ZtLnJlc3BvbnNlRXJyb3IudmFyaWFudFZhbHVlICYmIF92bS5yZXNwb25zZUVycm9yLnZhcmlhbnRWYWx1ZVswXSAmJiBfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbMF0ubmV3X3ByaWNlID09PSAiUiQgMCwwMCIgPyBfdm0ucmVzcG9uc2VFcnJvci52YXJpYW50VmFsdWVbMF0gOiAiRGlnaXRlIG8gdmFsb3IgdW5pdMOhcmlvIENPTSBQUk9NT8OHw4NPIGRvIFBST0RVVE8iKSsiICIpXSldKV1dOl92bS5fZSgpLChfdm0uc2hvd0NyZWF0ZVNlcnZpY2UpP1soIV92bS5wcmljZVRvTWF0Y2ggfHwgIV92bS5wcm9kdWN0U2VsZWN0ZWQucHJpY2VfdG9fbWF0Y2gpP1tfYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImlucHV0LWdyb3VwIGNvbC1sZy02IGNvbC1zbS0xMiBtdC0yIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczoiaW5wdXQtZ3JvdXAtcHJlcGVuZCJ9LFtfYygnc3Bhbicse3N0YXRpY0NsYXNzOiJpbnB1dC1ncm91cC10ZXh0In0sW192bS5fdigiRGUiKV0pXSksX2MoJ2lucHV0Jyx7ZGlyZWN0aXZlczpbe25hbWU6Im1vbmV5IixyYXdOYW1lOiJ2LW1vbmV5Iix2YWx1ZTooX3ZtLm1vbmV5KSxleHByZXNzaW9uOiJtb25leSJ9LHtuYW1lOiJtb2RlbCIscmF3TmFtZToidi1tb2RlbC5sYXp5Iix2YWx1ZTooX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzWzBdLm9sZF9wcmljZSksZXhwcmVzc2lvbjoicHJvZHVjdFNlbGVjdGVkLnNrdXNbMF0ub2xkX3ByaWNlIixtb2RpZmllcnM6eyJsYXp5Ijp0cnVlfX1dLHN0YXRpY0NsYXNzOiJmb3JtLWNvbnRyb2wgY29sLTEyIixjbGFzczp7CiAgICAgICAgICAgICAgICAgICAgICAgICdpcy1pbnZhbGlkJzoKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucmVzcG9uc2VFcnJvci52YXJpYW50VmFsdWUgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucmVzcG9uc2VFcnJvci52YXJpYW50VmFsdWVbMF0gJiYKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbMF0ub2xkX3ByaWNlID09PSAnUiQgMCwwMCcsCiAgICAgICAgICAgICAgICAgICAgICAgICdpcy12YWxpZCc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzWzBdLm9sZF9wcmljZSAhPT0gJ1IkIDAsMDAnLAogICAgICAgICAgICAgICAgICAgICAgfSxhdHRyczp7Im5hbWUiOiJvbGRQcmljZSIsInR5cGUiOiJ0ZXh0IiwiYXJpYS1kZXNjcmliZWRieSI6Im9sZFByaWNlSGVscCIsInBsYWNlaG9sZGVyIjoiUHJlw6dvIGRvIHByb2R1dG8ifSxkb21Qcm9wczp7InZhbHVlIjooX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzWzBdLm9sZF9wcmljZSl9LG9uOnsiY2hhbmdlIjpmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0uJHNldChfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbMF0sICJvbGRfcHJpY2UiLCAkZXZlbnQudGFyZ2V0LnZhbHVlKX19fSldKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImlucHV0LWdyb3VwIGNvbC1sZy02IGNvbC1zbS0xMiBtdC0yIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczoiaW5wdXQtZ3JvdXAtcHJlcGVuZCJ9LFtfYygnc3Bhbicse3N0YXRpY0NsYXNzOiJpbnB1dC1ncm91cC10ZXh0In0sW192bS5fdigiQXTDqSIpXSldKSxfYygnaW5wdXQnLHtkaXJlY3RpdmVzOlt7bmFtZToibW9uZXkiLHJhd05hbWU6InYtbW9uZXkiLHZhbHVlOihfdm0ubW9uZXkpLGV4cHJlc3Npb246Im1vbmV5In0se25hbWU6Im1vZGVsIixyYXdOYW1lOiJ2LW1vZGVsLmxhenkiLHZhbHVlOihfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbMF0ubmV3X3ByaWNlKSxleHByZXNzaW9uOiJwcm9kdWN0U2VsZWN0ZWQuc2t1c1swXS5uZXdfcHJpY2UiLG1vZGlmaWVyczp7ImxhenkiOnRydWV9fV0sc3RhdGljQ2xhc3M6ImZvcm0tY29udHJvbCBjb2wtMTIiLGNsYXNzOnsKICAgICAgICAgICAgICAgICAgICAgICAgJ2lzLWludmFsaWQnOgogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5yZXNwb25zZUVycm9yLnZhcmlhbnRWYWx1ZSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5yZXNwb25zZUVycm9yLnZhcmlhbnRWYWx1ZVswXSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1swXS5uZXdfcHJpY2UgPT09ICdSJCAwLDAwJywKICAgICAgICAgICAgICAgICAgICAgICAgJ2lzLXZhbGlkJzoKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbMF0ubmV3X3ByaWNlICE9PSAnUiQgMCwwMCcsCiAgICAgICAgICAgICAgICAgICAgICB9LGF0dHJzOnsibmFtZSI6Im5ld1ByaWNlIiwidHlwZSI6InRleHQiLCJhcmlhLWRlc2NyaWJlZGJ5IjoibmV3UHJpY2VIZWxwIiwicGxhY2Vob2xkZXIiOiJQcmXDp28gZG8gcHJvZHV0byJ9LGRvbVByb3BzOnsidmFsdWUiOihfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbMF0ubmV3X3ByaWNlKX0sb246eyJjaGFuZ2UiOmZ1bmN0aW9uKCRldmVudCl7cmV0dXJuIF92bS4kc2V0KF92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1swXSwgIm5ld19wcmljZSIsICRldmVudC50YXJnZXQudmFsdWUpfX19KV0pXTpfdm0uX2UoKV06X3ZtLl9lKCksKCFfdm0uc2hvd0NyZWF0ZVNlcnZpY2UpP19jKCdkaXYnLHtzdGF0aWNDbGFzczoiY29sLTEyIG10LTIifSxbX2MoJ2xhYmVsJyx7c3RhdGljQ2xhc3M6InN3aXRjaCJ9LFtfYygnaW5wdXQnLHtkaXJlY3RpdmVzOlt7bmFtZToibW9kZWwiLHJhd05hbWU6InYtbW9kZWwiLHZhbHVlOihfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbMF0uaW5fcHJvbW90aW9uKSxleHByZXNzaW9uOiJwcm9kdWN0U2VsZWN0ZWQuc2t1c1swXS5pbl9wcm9tb3Rpb24ifV0sYXR0cnM6eyJ0eXBlIjoiY2hlY2tib3giLCJpZCI6InNhbGUifSxkb21Qcm9wczp7ImNoZWNrZWQiOkFycmF5LmlzQXJyYXkoX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzWzBdLmluX3Byb21vdGlvbik/X3ZtLl9pKF92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1swXS5pbl9wcm9tb3Rpb24sbnVsbCk+LTE6KF92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1swXS5pbl9wcm9tb3Rpb24pfSxvbjp7ImNoYW5nZSI6ZnVuY3Rpb24oJGV2ZW50KXt2YXIgJCRhPV92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1swXS5pbl9wcm9tb3Rpb24sJCRlbD0kZXZlbnQudGFyZ2V0LCQkYz0kJGVsLmNoZWNrZWQ/KHRydWUpOihmYWxzZSk7aWYoQXJyYXkuaXNBcnJheSgkJGEpKXt2YXIgJCR2PW51bGwsJCRpPV92bS5faSgkJGEsJCR2KTtpZigkJGVsLmNoZWNrZWQpeyQkaTwwJiYoX3ZtLiRzZXQoX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzWzBdLCAiaW5fcHJvbW90aW9uIiwgJCRhLmNvbmNhdChbJCR2XSkpKX1lbHNleyQkaT4tMSYmKF92bS4kc2V0KF92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1swXSwgImluX3Byb21vdGlvbiIsICQkYS5zbGljZSgwLCQkaSkuY29uY2F0KCQkYS5zbGljZSgkJGkrMSkpKSl9fWVsc2V7X3ZtLiRzZXQoX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzWzBdLCAiaW5fcHJvbW90aW9uIiwgJCRjKX19fX0pLF9jKCdzcGFuJyx7c3RhdGljQ2xhc3M6InNsaWRlciByb3VuZCJ9KV0pLF9jKCdsYWJlbCcse3N0YXRpY0NsYXNzOiJtLTAgc2FsZSIsY2xhc3M6ewogICAgICAgICAgICAgICAgICAgICdmb250LXdlaWdodC1ib2xkJzogX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzWzBdLmluX3Byb21vdGlvbiwKICAgICAgICAgICAgICAgICAgfSxhdHRyczp7ImZvciI6InNhbGUifX0sW192bS5fdigiRW0gUHJvbW/Dp8OjbyIpXSldKTpfdm0uX2UoKSwoX3ZtLnNob3dDcmVhdGVTZXJ2aWNlKT9fYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImNvbC0xMiBtdC0yIixvbjp7ImNsaWNrIjpmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0udG9NYXRjaCghX3ZtLnByb2R1Y3RTZWxlY3RlZC5wcmljZV90b19tYXRjaCl9fX0sW19jKCdsYWJlbCcse3N0YXRpY0NsYXNzOiJzd2l0Y2gifSxbX2MoJ2lucHV0Jyx7ZGlyZWN0aXZlczpbe25hbWU6Im1vZGVsIixyYXdOYW1lOiJ2LW1vZGVsIix2YWx1ZTooX3ZtLnByb2R1Y3RTZWxlY3RlZC5wcmljZV90b19tYXRjaCksZXhwcmVzc2lvbjoicHJvZHVjdFNlbGVjdGVkLnByaWNlX3RvX21hdGNoIn1dLGF0dHJzOnsidHlwZSI6ImNoZWNrYm94IiwiaWQiOiJzYWxlIn0sZG9tUHJvcHM6eyJjaGVja2VkIjpBcnJheS5pc0FycmF5KF92bS5wcm9kdWN0U2VsZWN0ZWQucHJpY2VfdG9fbWF0Y2gpP192bS5faShfdm0ucHJvZHVjdFNlbGVjdGVkLnByaWNlX3RvX21hdGNoLG51bGwpPi0xOihfdm0ucHJvZHVjdFNlbGVjdGVkLnByaWNlX3RvX21hdGNoKX0sb246eyJjaGFuZ2UiOmZ1bmN0aW9uKCRldmVudCl7dmFyICQkYT1fdm0ucHJvZHVjdFNlbGVjdGVkLnByaWNlX3RvX21hdGNoLCQkZWw9JGV2ZW50LnRhcmdldCwkJGM9JCRlbC5jaGVja2VkPyh0cnVlKTooZmFsc2UpO2lmKEFycmF5LmlzQXJyYXkoJCRhKSl7dmFyICQkdj1udWxsLCQkaT1fdm0uX2koJCRhLCQkdik7aWYoJCRlbC5jaGVja2VkKXskJGk8MCYmKF92bS4kc2V0KF92bS5wcm9kdWN0U2VsZWN0ZWQsICJwcmljZV90b19tYXRjaCIsICQkYS5jb25jYXQoWyQkdl0pKSl9ZWxzZXskJGk+LTEmJihfdm0uJHNldChfdm0ucHJvZHVjdFNlbGVjdGVkLCAicHJpY2VfdG9fbWF0Y2giLCAkJGEuc2xpY2UoMCwkJGkpLmNvbmNhdCgkJGEuc2xpY2UoJCRpKzEpKSkpfX1lbHNle192bS4kc2V0KF92bS5wcm9kdWN0U2VsZWN0ZWQsICJwcmljZV90b19tYXRjaCIsICQkYyl9fX19KSxfYygnc3Bhbicse3N0YXRpY0NsYXNzOiJzbGlkZXIgcm91bmQifSldKSxfYygnbGFiZWwnLHtzdGF0aWNDbGFzczoibS0wIHNhbGUiLGNsYXNzOnsKICAgICAgICAgICAgICAgICAgICAnZm9udC13ZWlnaHQtYm9sZCc6IF92bS5wcm9kdWN0U2VsZWN0ZWQucHJpY2VfdG9fbWF0Y2gsCiAgICAgICAgICAgICAgICAgIH0sYXR0cnM6eyJmb3IiOiJzYWxlIn19LFtfdm0uX3YoIlByZcOnbyBhIGNvbWJpbmFyIildKV0pOl92bS5fZSgpXTooCiAgICAgICAgICAgICAgICBfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXMubGVuZ3RoID09PQogICAgICAgICAgICAgICAgX3ZtLmNhdGVnb3J5U2VsZWN0ZWQudmFyaWFudF92YWx1ZS5sZW5ndGgKICAgICAgICAgICAgICApP1tfYygnc2VjdGlvbicse3N0YXRpY0NsYXNzOiJjb2wtMTIgcm93IG0tYXV0byJ9LF92bS5fbCgoX3ZtLmNhdGVnb3J5U2VsZWN0ZWQudmFyaWFudF92YWx1ZSksZnVuY3Rpb24odmFyaWFudE5hbWUsaW5kZXgpe3JldHVybiBfYygnZGl2Jyx7a2V5OmluZGV4LHN0YXRpY0NsYXNzOiJjb2wtc20tMTIgY29sLW1kLTYgcC1tZC0xIHB4LTAgcHktMSJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImNhcmQgcHktMSJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6InJvdyBjb2wtMTIgbXgtYXV0byBtYi0yIHAtMCJ9LFtfYygncCcse3N0YXRpY0NsYXNzOiJjb2wtOCBteS0xIn0sW192bS5fdigiICIrX3ZtLl9zKF92bS5jYXRlZ29yeVNlbGVjdGVkLnZhcmlhbnRfbmFtZSkrIjogIitfdm0uX3MoX3ZtLnNob3dDcmVhdGVQcm9kdWN0ID8gX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzW2luZGV4XS52YWx1ZSA6IF92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1tpbmRleF0udmFyaWFudF92YWx1ZSkrIiAiKV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoiY29sLTQifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b20tY29udHJvbCBjdXN0b20tY2hlY2tib3hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLTBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLWZsZXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGlnbi1pdGVtcy1jZW50ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQtZW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICJ9LFtfYygnaW5wdXQnLHtkaXJlY3RpdmVzOlt7bmFtZToibW9kZWwiLHJhd05hbWU6InYtbW9kZWwiLHZhbHVlOihfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbaW5kZXhdLnN0YXR1cyksZXhwcmVzc2lvbjoicHJvZHVjdFNlbGVjdGVkLnNrdXNbaW5kZXhdLnN0YXR1cyJ9XSxzdGF0aWNDbGFzczoiY3VzdG9tLWNvbnRyb2wtaW5wdXQiLGF0dHJzOnsidHlwZSI6ImNoZWNrYm94IiwiaWQiOidkaXNwb25pdmVsJyArIGluZGV4fSxkb21Qcm9wczp7ImNoZWNrZWQiOkFycmF5LmlzQXJyYXkoX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzW2luZGV4XS5zdGF0dXMpP192bS5faShfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbaW5kZXhdLnN0YXR1cyxudWxsKT4tMTooX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzW2luZGV4XS5zdGF0dXMpfSxvbjp7ImNoYW5nZSI6ZnVuY3Rpb24oJGV2ZW50KXt2YXIgJCRhPV92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1tpbmRleF0uc3RhdHVzLCQkZWw9JGV2ZW50LnRhcmdldCwkJGM9JCRlbC5jaGVja2VkPyh0cnVlKTooZmFsc2UpO2lmKEFycmF5LmlzQXJyYXkoJCRhKSl7dmFyICQkdj1udWxsLCQkaT1fdm0uX2koJCRhLCQkdik7aWYoJCRlbC5jaGVja2VkKXskJGk8MCYmKF92bS4kc2V0KF92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1tpbmRleF0sICJzdGF0dXMiLCAkJGEuY29uY2F0KFskJHZdKSkpfWVsc2V7JCRpPi0xJiYoX3ZtLiRzZXQoX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzW2luZGV4XSwgInN0YXR1cyIsICQkYS5zbGljZSgwLCQkaSkuY29uY2F0KCQkYS5zbGljZSgkJGkrMSkpKSl9fWVsc2V7X3ZtLiRzZXQoX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzW2luZGV4XSwgInN0YXR1cyIsICQkYyl9fX19KSxfYygnbGFiZWwnLHtzdGF0aWNDbGFzczoiY3VzdG9tLWNvbnRyb2wtbGFiZWwiLGF0dHJzOnsiZm9yIjonZGlzcG9uaXZlbCcgKyBpbmRleH19LFtfdm0uX3YoIkRpc3BvbsOtdmVsIildKV0pXSldKSxfYygnc2VjdGlvbicse2NsYXNzOnsKICAgICAgICAgICAgICAgICAgICAgICAgaW5hY3RpdmVfc2VjdGlvbjogIV92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1tpbmRleF0uc3RhdHVzLAogICAgICAgICAgICAgICAgICAgICAgfX0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczoicm93IGNvbC0xMiBtLWF1dG8gcC0wIn0sWyhfdm0uc2hvd0NyZWF0ZVByb2R1Y3QpP19jKCdkaXYnLHtzdGF0aWNDbGFzczoiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBjb2wtc20tMTIgY29sLW1kLTYifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbS1jb250cm9sIGN1c3RvbS1jaGVja2JveFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcC0wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLWZsZXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWduLWl0ZW1zLWNlbnRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ9LFtfYygnaW5wdXQnLHtkaXJlY3RpdmVzOlt7bmFtZToibW9kZWwiLHJhd05hbWU6InYtbW9kZWwiLHZhbHVlOihfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbaW5kZXhdLmlzX3NrdXMpLGV4cHJlc3Npb246InByb2R1Y3RTZWxlY3RlZC5za3VzW2luZGV4XS5pc19za3VzIn1dLHN0YXRpY0NsYXNzOiJjdXN0b20tY29udHJvbC1pbnB1dCIsYXR0cnM6eyJ0eXBlIjoiY2hlY2tib3giLCJpZCI6J2lzX3NrdXNfJyArIGluZGV4LCJkaXNhYmxlZCI6IV92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1tpbmRleF0uc3RhdHVzfSxkb21Qcm9wczp7ImNoZWNrZWQiOkFycmF5LmlzQXJyYXkoX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzW2luZGV4XS5pc19za3VzKT9fdm0uX2koX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzW2luZGV4XS5pc19za3VzLG51bGwpPi0xOihfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbaW5kZXhdLmlzX3NrdXMpfSxvbjp7ImNoYW5nZSI6ZnVuY3Rpb24oJGV2ZW50KXt2YXIgJCRhPV92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1tpbmRleF0uaXNfc2t1cywkJGVsPSRldmVudC50YXJnZXQsJCRjPSQkZWwuY2hlY2tlZD8odHJ1ZSk6KGZhbHNlKTtpZihBcnJheS5pc0FycmF5KCQkYSkpe3ZhciAkJHY9bnVsbCwkJGk9X3ZtLl9pKCQkYSwkJHYpO2lmKCQkZWwuY2hlY2tlZCl7JCRpPDAmJihfdm0uJHNldChfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbaW5kZXhdLCAiaXNfc2t1cyIsICQkYS5jb25jYXQoWyQkdl0pKSl9ZWxzZXskJGk+LTEmJihfdm0uJHNldChfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbaW5kZXhdLCAiaXNfc2t1cyIsICQkYS5zbGljZSgwLCQkaSkuY29uY2F0KCQkYS5zbGljZSgkJGkrMSkpKSl9fWVsc2V7X3ZtLiRzZXQoX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzW2luZGV4XSwgImlzX3NrdXMiLCAkJGMpfX19fSksX2MoJ2xhYmVsJyx7c3RhdGljQ2xhc3M6IlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXN0b20tY29udHJvbC1sYWJlbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LW11dGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNrdV9sYWJlbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIixjbGFzczp7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2ZvbnQtd2VpZ2h0LWJvbGQnOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzW2luZGV4XS5pc19za3VzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LGF0dHJzOnsiZm9yIjonaXNfc2t1c18nICsgaW5kZXh9fSxbX3ZtLl92KCJQcm9kdXRvIHRlbSBTS1U/IildKV0pXSk6X3ZtLl9lKCksKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzW2luZGV4XS5pc19za3VzICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uc2hvd0NyZWF0ZVByb2R1Y3QKICAgICAgICAgICAgICAgICAgICAgICAgICApP19jKCdkaXYnLHtjbGFzczp7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY29sLXNtLTEyIGNvbC1tZC02IHBsLXNtLTEnOiBfdm0uc2hvd0NyZWF0ZVByb2R1Y3QsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY29sLTEyJzogX3ZtLnNob3dFZGl0UHJvZHVjdCwKICAgICAgICAgICAgICAgICAgICAgICAgICB9fSxbX2MoJ2lucHV0Jyx7ZGlyZWN0aXZlczpbe25hbWU6Im1vZGVsIixyYXdOYW1lOiJ2LW1vZGVsIix2YWx1ZTooX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzW2luZGV4XS5jb2RlKSxleHByZXNzaW9uOiJwcm9kdWN0U2VsZWN0ZWQuc2t1c1tpbmRleF0uY29kZSJ9XSxzdGF0aWNDbGFzczoiZm9ybS1jb250cm9sIixhdHRyczp7Im5hbWUiOiJjb2RlIiwidHlwZSI6InRleHQiLCJhcmlhLWRlc2NyaWJlZGJ5IjoiY29kZUhlbHAiLCJwbGFjZWhvbGRlciI6IlNLVSBkbyBQcm9kdXRvIiwiZGlzYWJsZWQiOiFfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbaW5kZXhdLnN0YXR1cyB8fAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uc2hvd0VkaXRQcm9kdWN0fSxkb21Qcm9wczp7InZhbHVlIjooX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzW2luZGV4XS5jb2RlKX0sb246eyJpbnB1dCI6ZnVuY3Rpb24oJGV2ZW50KXtpZigkZXZlbnQudGFyZ2V0LmNvbXBvc2luZyl7IHJldHVybjsgfV92bS4kc2V0KF92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1tpbmRleF0sICJjb2RlIiwgJGV2ZW50LnRhcmdldC52YWx1ZSl9fX0pXSk6X3ZtLl9lKCldKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6InJvdyBjb2wtMTIgbXgtYXV0byBtdC0yIn0sW19jKCdzbWFsbCcse3N0YXRpY0NsYXNzOiJjb2wtNCBwLTAgbS0wIHRleHQtbXV0ZWQifSxbX3ZtLl92KCJWYWxvciB1bml0w6FyaW8iKV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoiY29sLTggcC0wIHRleHQtcmlnaHQifSxbX2MoJ2xhYmVsJyx7c3RhdGljQ2xhc3M6InN3aXRjaCJ9LFtfYygnaW5wdXQnLHtkaXJlY3RpdmVzOlt7bmFtZToibW9kZWwiLHJhd05hbWU6InYtbW9kZWwiLHZhbHVlOigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbaW5kZXhdLmluX3Byb21vdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLGV4cHJlc3Npb246IlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0U2VsZWN0ZWQuc2t1c1tpbmRleF0uaW5fcHJvbW90aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAifV0sYXR0cnM6eyJ0eXBlIjoiY2hlY2tib3giLCJpZCI6J3NhbGUnICsgaW5kZXgsImRpc2FibGVkIjohX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzW2luZGV4XS5zdGF0dXN9LGRvbVByb3BzOnsiY2hlY2tlZCI6QXJyYXkuaXNBcnJheSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbaW5kZXhdLmluX3Byb21vdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApP192bS5faSgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbaW5kZXhdLmluX3Byb21vdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAsbnVsbCk+LTE6KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1tpbmRleF0uaW5fcHJvbW90aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICl9LG9uOnsiY2hhbmdlIjpmdW5jdGlvbigkZXZlbnQpe3ZhciAkJGE9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzW2luZGV4XS5pbl9wcm9tb3Rpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCQkZWw9JGV2ZW50LnRhcmdldCwkJGM9JCRlbC5jaGVja2VkPyh0cnVlKTooZmFsc2UpO2lmKEFycmF5LmlzQXJyYXkoJCRhKSl7dmFyICQkdj1udWxsLCQkaT1fdm0uX2koJCRhLCQkdik7aWYoJCRlbC5jaGVja2VkKXskJGk8MCYmKF92bS4kc2V0KF92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1tpbmRleF0sICJpbl9wcm9tb3Rpb24iLCAkJGEuY29uY2F0KFskJHZdKSkpfWVsc2V7JCRpPi0xJiYoX3ZtLiRzZXQoX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzW2luZGV4XSwgImluX3Byb21vdGlvbiIsICQkYS5zbGljZSgwLCQkaSkuY29uY2F0KCQkYS5zbGljZSgkJGkrMSkpKSl9fWVsc2V7X3ZtLiRzZXQoX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzW2luZGV4XSwgImluX3Byb21vdGlvbiIsICQkYyl9fX19KSxfYygnc3Bhbicse3N0YXRpY0NsYXNzOiJzbGlkZXIgcm91bmQifSldKSxfYygnbGFiZWwnLHtzdGF0aWNDbGFzczoibS0wIHNhbGUgdGV4dC1tdXRlZCIsY2xhc3M6ewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZm9udC13ZWlnaHQtYm9sZCc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzW2luZGV4XS5pbl9wcm9tb3Rpb24sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LGF0dHJzOnsiZm9yIjoic2FsZSJ9fSxbX3ZtLl92KCJFbSBQcm9tb8Onw6NvIildKV0pXSksKCFfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbaW5kZXhdLmluX3Byb21vdGlvbik/W19jKCdkaXYnLHtzdGF0aWNDbGFzczoiaW5wdXQtZ3JvdXAgY29sLTEyIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczoiaW5wdXQtZ3JvdXAtcHJlcGVuZCJ9LFtfYygnc3Bhbicse3N0YXRpY0NsYXNzOiJpbnB1dC1ncm91cC10ZXh0IHAtMSJ9LFtfdm0uX3YoIlBvciIpXSldKSxfYygnaW5wdXQnLHtkaXJlY3RpdmVzOlt7bmFtZToibW9uZXkiLHJhd05hbWU6InYtbW9uZXkiLHZhbHVlOihfdm0ubW9uZXkpLGV4cHJlc3Npb246Im1vbmV5In0se25hbWU6Im1vZGVsIixyYXdOYW1lOiJ2LW1vZGVsLmxhenkiLHZhbHVlOigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzW2luZGV4XS5vbGRfcHJpY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICksZXhwcmVzc2lvbjoiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9kdWN0U2VsZWN0ZWQuc2t1c1tpbmRleF0ub2xkX3ByaWNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIixtb2RpZmllcnM6eyJsYXp5Ijp0cnVlfX1dLHN0YXRpY0NsYXNzOiJmb3JtLWNvbnRyb2wiLGNsYXNzOnsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lzLWludmFsaWQnOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5yZXNwb25zZUVycm9yLnZhcmlhbnRWYWx1ZSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5yZXNwb25zZUVycm9yLnZhcmlhbnRWYWx1ZVtpbmRleF0gJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbaW5kZXhdLm9sZF9wcmljZSA9PT0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdSJCAwLDAwJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lzLXZhbGlkJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbaW5kZXhdLm9sZF9wcmljZSAhPT0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUiQgMCwwMCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LGF0dHJzOnsibmFtZSI6InByaWNlIiwidHlwZSI6InRleHQiLCJhcmlhLWRlc2NyaWJlZGJ5IjoncHJpY2VIZWxwJyArIGluZGV4LCJwbGFjZWhvbGRlciI6IlByZcOnbyBkbyBwcm9kdXRvIiwiZGlzYWJsZWQiOiFfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbaW5kZXhdLnN0YXR1c30sZG9tUHJvcHM6eyJ2YWx1ZSI6KAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbaW5kZXhdLm9sZF9wcmljZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKX0sb246eyJjaGFuZ2UiOmZ1bmN0aW9uKCRldmVudCl7cmV0dXJuIF92bS4kc2V0KF92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1tpbmRleF0sICJvbGRfcHJpY2UiLCAkZXZlbnQudGFyZ2V0LnZhbHVlKX19fSksX2MoJ3NtYWxsJyx7c3RhdGljQ2xhc3M6ImZvcm0tdGV4dCBpbmZvLWZvcm0gY29sLTEyIHAtMCBteS0xIixjbGFzczp7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpbnZhbGlkLWZlZWRiYWNrJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucmVzcG9uc2VFcnJvci52YXJpYW50VmFsdWVbaW5kZXhdICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzW2luZGV4XS5vbGRfcHJpY2UgPT09CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUiQgMCwwMCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd2YWxpZC1mZWVkYmFjayc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzW2luZGV4XS5vbGRfcHJpY2UgIT09CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1IkIDAsMDAnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxhdHRyczp7ImlkIjoncHJpY2VIZWxwJyArIGluZGV4fX0sW192bS5fdigiICIrX3ZtLl9zKF92bS5yZXNwb25zZUVycm9yLnZhcmlhbnRWYWx1ZSAmJiBfdm0ucmVzcG9uc2VFcnJvci52YXJpYW50VmFsdWVbaW5kZXhdICYmIF92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1tpbmRleF0ub2xkX3ByaWNlID09PSAiUiQgMCwwMCIgPyBfdm0ucmVzcG9uc2VFcnJvci52YXJpYW50VmFsdWVbaW5kZXhdIDogIkRpZ2l0ZSBvIHZhbG9yIHVuaXTDoXJpbyBkbyBQUk9EVVRPIikrIiAiKV0pXSldOltfYygnZGl2Jyx7c3RhdGljQ2xhc3M6InJvdyBjb2wtMTIgbS1hdXRvIn0sW19jKCdkaXYnLHtzdGF0aWNDbGFzczoiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC1ncm91cFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sLW1kLTYgY29sLXNtLTEyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbC1tZC0wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwci1tZC0xXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLTBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAifSxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJpbnB1dC1ncm91cC1wcmVwZW5kIn0sW19jKCdzcGFuJyx7c3RhdGljQ2xhc3M6ImlucHV0LWdyb3VwLXRleHQgcC0xIn0sW192bS5fdigiRGUiKV0pXSksX2MoJ2lucHV0Jyx7ZGlyZWN0aXZlczpbe25hbWU6Im1vbmV5IixyYXdOYW1lOiJ2LW1vbmV5Iix2YWx1ZTooX3ZtLm1vbmV5KSxleHByZXNzaW9uOiJtb25leSJ9LHtuYW1lOiJtb2RlbCIscmF3TmFtZToidi1tb2RlbC5sYXp5Iix2YWx1ZTooCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzW2luZGV4XS5vbGRfcHJpY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxleHByZXNzaW9uOiJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdFNlbGVjdGVkLnNrdXNbaW5kZXhdLm9sZF9wcmljZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIixtb2RpZmllcnM6eyJsYXp5Ijp0cnVlfX1dLHN0YXRpY0NsYXNzOiJmb3JtLWNvbnRyb2wgY29sLTEyIixjbGFzczp7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lzLWludmFsaWQnOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnJlc3BvbnNlRXJyb3IudmFyaWFudFZhbHVlICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucmVzcG9uc2VFcnJvci52YXJpYW50VmFsdWVbaW5kZXhdICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbaW5kZXhdLm9sZF9wcmljZSA9PT0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1IkIDAsMDAnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpcy12YWxpZCc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbaW5kZXhdLm9sZF9wcmljZSAhPT0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdSJCAwLDAwJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxhdHRyczp7Im5hbWUiOiJvbGRQcmljZSIsInR5cGUiOiJ0ZXh0IiwiYXJpYS1kZXNjcmliZWRieSI6J29sZFByaWNlSGVscCcgKyBpbmRleCwicGxhY2Vob2xkZXIiOiJQcmXDp28gZG8gcHJvZHV0byIsImRpc2FibGVkIjohX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzW2luZGV4XS5zdGF0dXN9LGRvbVByb3BzOnsidmFsdWUiOigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbaW5kZXhdLm9sZF9wcmljZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApfSxvbjp7ImNoYW5nZSI6ZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLiRzZXQoX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzW2luZGV4XSwgIm9sZF9wcmljZSIsICRldmVudC50YXJnZXQudmFsdWUpfX19KSxfYygnc21hbGwnLHtzdGF0aWNDbGFzczoiZm9ybS10ZXh0IGluZm8tZm9ybSBjb2wtMTIgcC0wIG15LTEiLGNsYXNzOnsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaW52YWxpZC1mZWVkYmFjayc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucmVzcG9uc2VFcnJvci52YXJpYW50VmFsdWVbaW5kZXhdICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbaW5kZXhdLm9sZF9wcmljZSA9PT0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1IkIDAsMDAnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd2YWxpZC1mZWVkYmFjayc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbaW5kZXhdLm9sZF9wcmljZSAhPT0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdSJCAwLDAwJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxhdHRyczp7ImlkIjonb2xkUHJpY2VIZWxwJyArIGluZGV4fX0sW192bS5fdigiICIrX3ZtLl9zKF92bS5yZXNwb25zZUVycm9yLnZhcmlhbnRWYWx1ZSAmJiBfdm0ucmVzcG9uc2VFcnJvci52YXJpYW50VmFsdWVbaW5kZXhdICYmIF92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1tpbmRleF0ub2xkX3ByaWNlID09PSAiUiQgMCwwMCIgPyBfdm0ucmVzcG9uc2VFcnJvci52YXJpYW50VmFsdWVbaW5kZXhdIDogIkRpZ2l0ZSBvIHZhbG9yIHVuaXTDoXJpbyBTRU0gUFJPTU/Dh8ODTyBkbyBQUk9EVVRPIikrIiAiKV0pXSksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LWdyb3VwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2wtbWQtNiBjb2wtc20tMTJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByLW1kLTBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsLW1kLTFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAtMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ9LFtfYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImlucHV0LWdyb3VwLXByZXBlbmQifSxbX2MoJ3NwYW4nLHtzdGF0aWNDbGFzczoiaW5wdXQtZ3JvdXAtdGV4dCBwLTEifSxbX3ZtLl92KCJQb3IiKV0pXSksX2MoJ2lucHV0Jyx7ZGlyZWN0aXZlczpbe25hbWU6Im1vbmV5IixyYXdOYW1lOiJ2LW1vbmV5Iix2YWx1ZTooX3ZtLm1vbmV5KSxleHByZXNzaW9uOiJtb25leSJ9LHtuYW1lOiJtb2RlbCIscmF3TmFtZToidi1tb2RlbC5sYXp5Iix2YWx1ZTooCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzW2luZGV4XS5uZXdfcHJpY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSxleHByZXNzaW9uOiJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZHVjdFNlbGVjdGVkLnNrdXNbaW5kZXhdLm5ld19wcmljZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIixtb2RpZmllcnM6eyJsYXp5Ijp0cnVlfX1dLHN0YXRpY0NsYXNzOiJmb3JtLWNvbnRyb2wgY29sLTEyIixjbGFzczp7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lzLWludmFsaWQnOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnJlc3BvbnNlRXJyb3IudmFyaWFudFZhbHVlICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucmVzcG9uc2VFcnJvci52YXJpYW50VmFsdWVbaW5kZXhdICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbaW5kZXhdLm5ld19wcmljZSA9PT0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1IkIDAsMDAnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpcy12YWxpZCc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbaW5kZXhdLm5ld19wcmljZSAhPT0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdSJCAwLDAwJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxhdHRyczp7Im5hbWUiOiJuZXdQcmljZSIsInR5cGUiOiJ0ZXh0IiwiYXJpYS1kZXNjcmliZWRieSI6J25ld1ByaWNlSGVscCcgKyBpbmRleCwicGxhY2Vob2xkZXIiOiJQcmXDp28gZG8gcHJvZHV0byIsImRpc2FibGVkIjohX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzW2luZGV4XS5zdGF0dXN9LGRvbVByb3BzOnsidmFsdWUiOigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbaW5kZXhdLm5ld19wcmljZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICApfSxvbjp7ImNoYW5nZSI6ZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLiRzZXQoX3ZtLnByb2R1Y3RTZWxlY3RlZC5za3VzW2luZGV4XSwgIm5ld19wcmljZSIsICRldmVudC50YXJnZXQudmFsdWUpfX19KSxfYygnc21hbGwnLHtzdGF0aWNDbGFzczoiZm9ybS10ZXh0IGluZm8tZm9ybSBjb2wtMTIgcC0wIG15LTEiLGNsYXNzOnsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaW52YWxpZC1mZWVkYmFjayc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucmVzcG9uc2VFcnJvci52YXJpYW50VmFsdWVbaW5kZXhdICYmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbaW5kZXhdLm5ld19wcmljZSA9PT0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1IkIDAsMDAnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd2YWxpZC1mZWVkYmFjayc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucHJvZHVjdFNlbGVjdGVkLnNrdXNbaW5kZXhdLm5ld19wcmljZSAhPT0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdSJCAwLDAwJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxhdHRyczp7ImlkIjonbmV3UHJpY2VIZWxwJyArIGluZGV4fX0sW192bS5fdigiICIrX3ZtLl9zKF92bS5yZXNwb25zZUVycm9yLnZhcmlhbnRWYWx1ZSAmJiBfdm0ucmVzcG9uc2VFcnJvci52YXJpYW50VmFsdWVbaW5kZXhdICYmIF92bS5wcm9kdWN0U2VsZWN0ZWQuc2t1c1tpbmRleF0ubmV3X3ByaWNlID09PSAiUiQgMCwwMCIgPyBfdm0ucmVzcG9uc2VFcnJvci52YXJpYW50VmFsdWVbaW5kZXhdIDogIkRpZ2l0ZSBvIHZhbG9yIHVuaXTDoXJpbyBDT00gUFJPTU/Dh8ODTyBkbyBQUk9EVVRPIikrIiAiKV0pXSldKV1dLDIpXSldKX0pLDApXTpbX2MoJ3NlY3Rpb24nLHtzdGF0aWNDbGFzczoiY29sLTEyIHJvdyBtLWF1dG8ifSxbX3ZtLl92KCIgTsOjbyBmb2kgcG9zc8OtdmVsIHJlY3VwZXJhciBhcyB2YXJpYW50ZXMgZGVzdGUgcHJvZHV0by4gIildKV1dLDIpLChfdm0uc2hvd0VkaXRQcm9kdWN0KT9fYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImNhZHByb2RfX3F1ZXN0aW9ucy0tdG9nZ2xlIG1vYmlsZSJ9LFtfYygnbGFiZWwnLHtzdGF0aWNDbGFzczoic3dpdGNoIn0sW19jKCdpbnB1dCcse2RpcmVjdGl2ZXM6W3tuYW1lOiJtb2RlbCIscmF3TmFtZToidi1tb2RlbCIsdmFsdWU6KF92bS5pc1B1Ymxpc2hlZCksZXhwcmVzc2lvbjoiaXNQdWJsaXNoZWQifV0sYXR0cnM6eyJ0eXBlIjoiY2hlY2tib3giLCJpZCI6InBhdXNlLXByb2R1Y3QifSxkb21Qcm9wczp7ImNoZWNrZWQiOkFycmF5LmlzQXJyYXkoX3ZtLmlzUHVibGlzaGVkKT9fdm0uX2koX3ZtLmlzUHVibGlzaGVkLG51bGwpPi0xOihfdm0uaXNQdWJsaXNoZWQpfSxvbjp7ImNoYW5nZSI6W2Z1bmN0aW9uKCRldmVudCl7dmFyICQkYT1fdm0uaXNQdWJsaXNoZWQsJCRlbD0kZXZlbnQudGFyZ2V0LCQkYz0kJGVsLmNoZWNrZWQ/KHRydWUpOihmYWxzZSk7aWYoQXJyYXkuaXNBcnJheSgkJGEpKXt2YXIgJCR2PW51bGwsJCRpPV92bS5faSgkJGEsJCR2KTtpZigkJGVsLmNoZWNrZWQpeyQkaTwwJiYoX3ZtLmlzUHVibGlzaGVkPSQkYS5jb25jYXQoWyQkdl0pKX1lbHNleyQkaT4tMSYmKF92bS5pc1B1Ymxpc2hlZD0kJGEuc2xpY2UoMCwkJGkpLmNvbmNhdCgkJGEuc2xpY2UoJCRpKzEpKSl9fWVsc2V7X3ZtLmlzUHVibGlzaGVkPSQkY319LGZ1bmN0aW9uKCRldmVudCl7cmV0dXJuIF92bS5vcGVuUHVibGlzaGVkTW9kYWwoKX1dfX0pLF9jKCdzcGFuJyx7c3RhdGljQ2xhc3M6InNsaWRlciByb3VuZCJ9KV0pLF9jKCdsYWJlbCcse2F0dHJzOnsiZm9yIjoicGF1c2UtcHJvZHVjdCJ9fSxbX3ZtLl92KCIgIitfdm0uX3MoX3ZtLnByb2R1Y3RTZWxlY3RlZC5pc19wdWJsaXNoZWQgPyAiUGF1c2FyIGFuw7puY2lvIiA6ICJSZXRvbWFyIGFuw7puY2lvIikrIiAiKV0pXSk6X3ZtLl9lKCksKF92bS5zaG93RWRpdFByb2R1Y3QpP19jKCdzcGFuJyx7c3RhdGljQ2xhc3M6IlxuICAgICAgICAgICAgICBjYWRwcm9kX19xdWVzdGlvbnMtLWRlbGV0ZVxuICAgICAgICAgICAgICBkLWZsZXhcbiAgICAgICAgICAgICAgYWxpZ24taXRlbXMtY2VudGVyXG4gICAgICAgICAgICAgIG1vYmlsZVxuICAgICAgICAgICAgICBtdC0yXG4gICAgICAgICAgICAiLG9uOnsiY2xpY2siOmZ1bmN0aW9uKCRldmVudCl7cmV0dXJuIF92bS5vcGVuTW9kYWxEZWxldGUoX3ZtLnByb2R1Y3RTZWxlY3RlZCl9fX0sW19jKCdzcGFuJyx7c3RhdGljQ2xhc3M6Im1hdGVyaWFsLWljb25zIn0sW192bS5fdigiZGVsZXRlIildKSxfdm0uX3YoIiBEZWxldGFyICIpXSk6X3ZtLl9lKCldKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImNvbC0xMiBjYXJkLWFjdGlvbiBwLTIifSxbX2MoJ2J1dHRvbicse3N0YXRpY0NsYXNzOiJidG4gYnRuLXByaW1hcnkgdy0xMDAgdGV4dC11cHBlcmNhc2UiLG9uOnsiY2xpY2siOmZ1bmN0aW9uKCRldmVudCl7cmV0dXJuIF92bS5zYXZlUHJvZHVjdCgpfX19LFtfdm0uX3YoIiAiK192bS5fcyhfdm0udGl0bGVCdG4pKyIgIildKV0pXSksX2MoJ3NlY3Rpb24nLHtzdGF0aWNDbGFzczoiY2FyZC1vcmRlcnMtZm9vdGVyIGQtZmxleCBqdXN0aWZ5LWNvbnRlbnQtZW5kIHB0LTIifSxbX2MoJ2ltZycse2F0dHJzOnsic3JjIjpyZXF1aXJlKCJAL2Fzc2V0cy9pbWFnZXMvbG9nby1wZXJ0aW5oby5zdmciKSwiYWx0IjoiUGVydGluaG8gZGUgY2FzYSIsInRpdGxlIjoiUGVydGluaG8gZGUgY2FzYSJ9fSldKV0sMSksKF92bS5zaG93RGVsZXRlUHJvZHVjdCk/X2MoJ3Byb2R1Y3REZWxldGUnLHthdHRyczp7InByb3BTaG93RGVsZXRlUHJvZHVjdCI6X3ZtLnNob3dEZWxldGVQcm9kdWN0LCJwcm9wUHJvZHVjdFNlbGVjdGVkIjpfdm0ucHJvZHVjdFNlbGVjdGVkfSxvbjp7ImNsb3NlRGVsZXRlUHJvZHVjdE1vZGFsIjpmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0uY2xvc2VEZWxldGVQcm9kdWN0TW9kYWwoKX0sImNsb3NlQWxsTW9kYWwiOmZ1bmN0aW9uKCRldmVudCl7cmV0dXJuIF92bS5jbG9zZVByb2R1Y3RNb2RhbCgpfSwiZGVzdHJveVNlbGVjdGVkIjpmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0uZGVzdHJveVNlbGVjdGVkKCl9LCJnZXRDYXRlZ29yaWVzIjpmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0uZ2V0Q2F0ZWdvcmllcygkZXZlbnQpfSwibG9hZGluZyI6ZnVuY3Rpb24oJGV2ZW50KXtfdm0ubG9hZGluZ0NvbnRyb2xsZXIgPSBmYWxzZX19fSk6X3ZtLl9lKCksKF92bS5zaG93UHVibGlzaGVkUHJvZHVjdCk/X2MoJ3Byb2R1Y3RQdWJsaXNoZWQnLHthdHRyczp7InByb3BTaG93UHVibGlzaGVkUHJvZHVjdCI6X3ZtLnNob3dQdWJsaXNoZWRQcm9kdWN0LCJwcm9wUHJvZHVjdFNlbGVjdGVkIjpfdm0ucHJvZHVjdFNlbGVjdGVkLCJwcm9wUmVnaXN0ZXJUeXBlIjpfdm0ucHJvZHVjdFNlbGVjdGVkLnJlZ2lzdGVyX3R5cGV9LG9uOnsicHVibGlzaGVkUHJvZHVjdCI6ZnVuY3Rpb24oJGV2ZW50KXtyZXR1cm4gX3ZtLnB1Ymxpc2hlZFByb2R1Y3QoKX0sImNhbmNlbFB1Ymxpc2hlZE1vZGFsIjpmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0uY2FuY2VsUHVibGlzaGVkTW9kYWwoKX0sImNsb3NlUHVibGlzaGVkTW9kYWwiOmZ1bmN0aW9uKCRldmVudCl7cmV0dXJuIF92bS5jbG9zZVB1Ymxpc2hlZE1vZGFsKCl9fX0pOl92bS5fZSgpLChfdm0uc2hvd0VkaXRJbWFnZSk/X2MoJ3Byb2R1Y3RFZGl0SW1hZ2UnLHtrZXk6X3ZtLmluZGV4SW1hZ2VzLmxlbmd0aCxhdHRyczp7InByb3BTaG93RWRpdEltYWdlIjpfdm0uc2hvd0VkaXRJbWFnZSwicHJvcFNob3dFZGl0UHJvZHVjdCI6X3ZtLnNob3dFZGl0UHJvZHVjdCwicHJvcFByb2R1Y3RHdWlkIjpfdm0ucHJvZHVjdFNlbGVjdGVkLmd1aWQsInByb3BJbWFnZXNMaXN0Ijpfdm0ucHJvZHVjdFNlbGVjdGVkLmltYWdlX2xpc3QsInByb3BJbmRleEltYWdlcyI6X3ZtLmluZGV4SW1hZ2VzLCJwcm9wUmVnaXN0ZXJUeXBlIjpfdm0ucHJvZHVjdFNlbGVjdGVkLnJlZ2lzdGVyX3R5cGUsInByb3BDYW5SZW9yZGVySW1hZ2VzIjpfdm0uY2FuUmVvcmRlckltYWdlc30sb246eyJjbG9zZUVkaXRJbWFnZU1vZGFsIjpmdW5jdGlvbigkZXZlbnQpe3JldHVybiBfdm0uY2xvc2VFZGl0SW1hZ2VNb2RhbCgpfSwicHJldmlvdXNSZW9yZGVySW1hZ2VzIjpfdm0ucHJldmlvdXNSZW9yZGVySW1hZ2VzLCJjdXJyZW50UmVvcmRlckltYWdlIjpfdm0uY3VycmVudFJlb3JkZXJJbWFnZSwicmVtb3ZlSW1hZ2UiOl92bS5yZW1vdmVJbWFnZXMsIm9wZW5JbnB1dCI6X3ZtLm9wZW5JbnB1dH19KTpfdm0uX2UoKSwoX3ZtLnNob3dJbXBvcnRJbWFnZSk/X2MoJ3Byb2R1Y3RJbXBvcnRJbWFnZScse2F0dHJzOnsicHJvcFNob3dJbXBvcnRJbWFnZSI6X3ZtLnNob3dJbXBvcnRJbWFnZSwicHJvcEltYWdlc0xpc3RMZW5ndGgiOl92bS5wcm9kdWN0U2VsZWN0ZWQuaW1hZ2VfbGlzdC5sZW5ndGgsInByb3BJbWdMaXN0Ijpfdm0ucHJvZHVjdFNlbGVjdGVkLmltYWdlX2xpc3RbMF0sInByb3BQcm9kdWN0R3VpZCI6X3ZtLnByb2R1Y3RTZWxlY3RlZC5ndWlkLCJwcm9wUG9zaXRpb24iOl92bS5wb3NpdGlvblNlbGVjdGVkLCJwcm9wUmVnaXN0ZXJUeXBlIjpfdm0ucHJvZHVjdFNlbGVjdGVkLnJlZ2lzdGVyX3R5cGV9LG9uOnsiY2xvc2VJbXBvcnRJbWFnZU1vZGFsIjpfdm0uY2xvc2VJbXBvcnRJbWFnZX19KTpfdm0uX2UoKSwoX3ZtLnNob3dDbG9zZU1vZGFsKT9fYygncHJvZHVjdENsb3NlTW9kYWwnLHthdHRyczp7InByb1Nob3dDbG9zZU1vZGFsIjpfdm0uc2hvd0Nsb3NlTW9kYWx9LG9uOnsiY2xvc2VQcm9kdWN0TW9kYWwiOl92bS5jbG9zZVByb2R1Y3RNb2RhbCwiY2xvc2VDbG9zZU1vZGFsIjpfdm0uY2xvc2VDbG9zZU1vZGFsfX0pOl92bS5fZSgpLChfdm0ubG9hZGluZ0NvbnRyb2xsZXIpP19jKCdwcm9kdWN0LWxvYWRpbmctc2NyZWVuJyx7YXR0cnM6eyJpbWFnZS1saXN0Ijpfdm0ucHJvZHVjdFNlbGVjdGVkLmltYWdlX2xpc3QsImNyZWF0aW5nLXByb2R1Y3QiOl92bS5jcmVhdGluZ1Byb2R1Y3R9fSk6X3ZtLl9lKCldLDEpOl92bS5fZSgpXSl9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}