{"remainingRequest":"/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/aline/GitHub/admin-frontend/src/views/home-seller/home-seller.html?vue&type=template&id=7fb3e2be&","dependencies":[{"path":"/home/aline/GitHub/admin-frontend/src/views/home-seller/home-seller.html","mtime":1696439584913},{"path":"/home/aline/GitHub/admin-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1673370377252},{"path":"/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1673370389594}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "section",
    { staticClass: "section-home" },
    [
      _c("HeaderSeller"),
      _vm.featureFlagsLanding
        ? _c("lading-page-banners-carousel", {
            staticClass: " btn-fluid banner",
            attrs: { banners: _vm.featureFlagsLanding.banners }
          })
        : _vm._e(),
      _c("section", { staticClass: "banners-carousel-b" }, [
        _c(
          "div",
          { staticClass: "browser-marker" },
          [
            _c(
              "carousel",
              {
                staticClass: "btn-fluid",
                attrs: {
                  "per-page": 1,
                  navigationEnabled: false,
                  "mouse-drag": false
                }
              },
              [
                _c("slide", [
                  _c("div", { staticClass: " btn-fluid banner-b" }, [
                    _c("div", { staticClass: "div-title" }, [
                      _c("p", { staticClass: "title" }, [
                        _vm._v(
                          "A Pertinho de Casa é exclusiva e dedicada a você que tem um micro ou pequeno negócio"
                        )
                      ])
                    ]),
                    _c(
                      "div",
                      { staticClass: "container-information car-promo" },
                      [
                        _c("container", { staticClass: "box-information" }, [
                          _c("p", { staticClass: "icone" }, [
                            _c("img", {
                              attrs: {
                                src: require("@/assets/images/Vector-banner-a.png")
                              }
                            })
                          ]),
                          _c("div", { staticClass: "div-text" }, [
                            _c("h2", { staticClass: "sub-title" }, [
                              _vm._v("Zero Taxas")
                            ])
                          ]),
                          _c("div", { staticClass: "div-text-b" }, [
                            _c("h1", { staticClass: "sub-title-b" }, [
                              _vm._v("Mesmo !")
                            ])
                          ])
                        ]),
                        _c("container", { staticClass: "box-information" }, [
                          _c("p", { staticClass: "icone" }, [
                            _c("img", {
                              attrs: {
                                src: require("@/assets/images/Vector-banner-b.png")
                              }
                            })
                          ]),
                          _c("div", { staticClass: "div-text" }, [
                            _c("h2", { staticClass: "sub-title" }, [
                              _vm._v("Negocie valores e entrega")
                            ])
                          ]),
                          _c("div", { staticClass: "div-text-b" }, [
                            _c("h1", { staticClass: "sub-title-b" }, [
                              _vm._v("Direto com o cliente pelo seu WhatsApp")
                            ])
                          ])
                        ]),
                        _c("container", { staticClass: "box-information" }, [
                          _c("p", { staticClass: "icone" }, [
                            _c("img", {
                              attrs: {
                                src: require("@/assets/images/Vector-banner-c.png")
                              }
                            })
                          ]),
                          _c("div", { staticClass: "div-text" }, [
                            _c("h2", { staticClass: "sub-title" }, [
                              _vm._v("Suporte humanizado")
                            ])
                          ]),
                          _c("div", { staticClass: "div-text-b" }, [
                            _c("h1", { staticClass: "sub-title-b" }, [
                              _vm._v("Base de conteúdo completa e assistente")
                            ])
                          ])
                        ])
                      ],
                      1
                    ),
                    _c(
                      "div",
                      { staticClass: "div-button-yellow" },
                      [
                        _c(
                          "router-link",
                          {
                            staticClass: "button-yellow-click",
                            attrs: { to: "/quero-vender" }
                          },
                          [
                            _c(
                              "button",
                              {
                                staticClass:
                                  " btn  d-flex align-items-center justify-content-center restantes m-0 button-yellow "
                              },
                              [
                                _c("p", { staticClass: "button-text" }, [
                                  _vm._v(
                                    "Criar meu catálogo na Pertinho de Casa"
                                  )
                                ])
                              ]
                            )
                          ]
                        )
                      ],
                      1
                    )
                  ])
                ])
              ],
              1
            )
          ],
          1
        ),
        _c("div", { staticClass: "mobile-marker" }, [
          _c(
            "div",
            { staticClass: " btn-fluid banner-b" },
            [
              _vm._m(0),
              _c(
                "carousel",
                {
                  staticClass: "btn-fluid",
                  attrs: {
                    "per-page": 1,
                    navigationEnabled: false,
                    "mouse-drag": false
                  }
                },
                [
                  _c("slide", [
                    _c(
                      "div",
                      { staticClass: "container-information car-promo" },
                      [
                        _c("container", { staticClass: "box-information" }, [
                          _c("p", { staticClass: "icone" }, [
                            _c("img", {
                              attrs: {
                                src: require("@/assets/images/Vector-banner-a.png")
                              }
                            })
                          ]),
                          _c("div", { staticClass: "div-text" }, [
                            _c("h2", { staticClass: "sub-title" }, [
                              _vm._v("Zero Taxas")
                            ])
                          ]),
                          _c("div", { staticClass: "div-text-b" }, [
                            _c("h1", { staticClass: "sub-title-b" }, [
                              _vm._v("Mesmo !")
                            ])
                          ])
                        ])
                      ],
                      1
                    )
                  ]),
                  _c("slide", [
                    _c(
                      "div",
                      { staticClass: "container-information car-promo" },
                      [
                        _c("container", { staticClass: "box-information" }, [
                          _c("p", { staticClass: "icone" }, [
                            _c("img", {
                              attrs: {
                                src: require("@/assets/images/Vector-banner-b.png")
                              }
                            })
                          ]),
                          _c("div", { staticClass: "div-text" }, [
                            _c("h2", { staticClass: "sub-title" }, [
                              _vm._v("Negocie valores e entrega")
                            ])
                          ]),
                          _c("div", { staticClass: "div-text-b" }, [
                            _c("h1", { staticClass: "sub-title-b" }, [
                              _vm._v("Direto com o cliente pelo seu WhatsApp")
                            ])
                          ])
                        ])
                      ],
                      1
                    )
                  ]),
                  _c("slide", [
                    _c(
                      "div",
                      { staticClass: "container-information car-promo" },
                      [
                        _c("container", { staticClass: "box-information" }, [
                          _c("p", { staticClass: "icone" }, [
                            _c("img", {
                              attrs: {
                                src: require("@/assets/images/Vector-banner-c.png")
                              }
                            })
                          ]),
                          _c("div", { staticClass: "div-text" }, [
                            _c("h2", { staticClass: "sub-title" }, [
                              _vm._v("Suporte humanizado")
                            ])
                          ]),
                          _c("div", { staticClass: "div-text-b" }, [
                            _c("h1", { staticClass: "sub-title-b" }, [
                              _vm._v("Base de conteúdo completa e assistente")
                            ])
                          ])
                        ])
                      ],
                      1
                    )
                  ])
                ],
                1
              )
            ],
            1
          ),
          _c("div", { staticClass: "div-button-yellow" }, [
            _c(
              "div",
              { staticClass: "div-index" },
              [
                _c(
                  "router-link",
                  {
                    staticClass: "button-yellow-click",
                    attrs: { to: "/quero-vender" }
                  },
                  [
                    _c(
                      "button",
                      {
                        staticClass:
                          " btn  d-flex align-items-center justify-content-center restantes m-0 button-yellow "
                      },
                      [
                        _c("p", { staticClass: "button-text" }, [
                          _vm._v("Criar meu catálogo na Pertinho de Casa")
                        ])
                      ]
                    )
                  ]
                )
              ],
              1
            )
          ])
        ]),
        _vm._m(1),
        _c("div", { staticClass: "div-bar" }),
        _c("div", { staticClass: "frame-showcase" }, [
          _c("img", {
            staticClass: "using-phone-mobile",
            attrs: {
              src: require("../../assets/images/using-phone-vector.png")
            }
          }),
          _c(
            "div",
            { staticClass: "div-text-showcase" },
            [
              _c("p", { staticClass: "title-showcase" }, [
                _vm._v("Chegou a hora do seu negócio vender pela internet!")
              ]),
              _c("p", { staticClass: "sub-title-showcase" }, [
                _vm._v("E a gente vai te apoiar nessa jornada!")
              ]),
              _c(
                "router-link",
                {
                  staticClass: "button-yellow-click",
                  attrs: { to: "/quero-vender" }
                },
                [
                  _c("button", { staticClass: "button-showcase" }, [
                    _c("p", { staticClass: "text-button" }, [
                      _vm._v("Quero minha vitrine virtual gratuita!")
                    ])
                  ])
                ]
              )
            ],
            1
          ),
          _c("img", {
            staticClass: "using-phone",
            attrs: {
              src: require("../../assets/images/using-phone-vector.png")
            }
          })
        ]),
        _c("div", { staticClass: "container-benefits" }, [
          _vm._m(2),
          _vm._m(3),
          _c(
            "div",
            {
              staticClass:
                "div-4 d-flex justify-content-center align-items-flex-start"
            },
            [
              _c("img", {
                staticClass: "painel-4",
                attrs: { src: require("../../assets/images/painel 1-2.png") }
              }),
              _c(
                "div",
                { staticClass: "text-benefits justify-content-center" },
                [
                  _c("h2", { staticClass: "sub-title-benefits" }, [
                    _vm._v(" Conte sempre com o suporte que você precisa:")
                  ]),
                  _vm._m(4),
                  _vm._m(5),
                  _vm._m(6),
                  _vm._m(7),
                  _c(
                    "router-link",
                    {
                      staticClass: "button-yellow-click",
                      attrs: { to: "/quero-vender" }
                    },
                    [
                      _c("button", { staticClass: "button-benefits" }, [
                        _c("p", { staticClass: "text-button-benefits" }, [
                          _vm._v("Cadastrar o meu negócio na Pertinho")
                        ])
                      ])
                    ]
                  )
                ],
                1
              )
            ]
          )
        ]),
        _c("div", { staticClass: "browser-marker" }, [
          _c("div", { staticClass: " banner-5" }, [
            _vm._m(8),
            _c(
              "div",
              { staticClass: "container-information-categories" },
              [
                _c("container", { staticClass: " flex" }, [
                  _c(
                    "a",
                    {
                      staticClass: "img-categories",
                      attrs: {
                        href:
                          "https://www.pertinhodecasa.com.br/vitrine/vinagreira-viga?utm_source=organic&utm_medium=landingpage&utm_campaign=vitrinehomeseller"
                      }
                    },
                    [
                      _c("img", {
                        attrs: {
                          src: require("@/assets/images/comidasERestaurantes.png")
                        }
                      })
                    ]
                  )
                ]),
                _c("container", { staticClass: "flex" }, [
                  _c(
                    "a",
                    {
                      staticClass: "img-categories",
                      attrs: {
                        href:
                          "https://www.pertinhodecasa.com.br/vitrine/kolobo?utm_source=organic&utm_medium=landingpage&utm_campaign=vitrinehomeseller"
                      }
                    },
                    [
                      _c("img", {
                        attrs: {
                          src: require("@/assets/images/roupasEAcessorios.png")
                        }
                      })
                    ]
                  )
                ]),
                _c("container", { staticClass: "flex" }, [
                  _c(
                    "a",
                    {
                      staticClass: "img-categories",
                      attrs: {
                        href:
                          "https://www.pertinhodecasa.com.br/vitrine/sintropia-cosmeticos-agroflorestais?utm_source=organic&utm_medium=landingpage&utm_campaign=vitrinehomeseller"
                      }
                    },
                    [
                      _c("img", {
                        attrs: { src: require("@/assets/images/saude.png") }
                      })
                    ]
                  )
                ])
              ],
              1
            )
          ])
        ]),
        _c("div", { staticClass: "mobile-marker" }, [
          _c(
            "div",
            { staticClass: "banner-5" },
            [
              _vm._m(9),
              _c(
                "carousel",
                {
                  staticClass: "btn-fluid",
                  attrs: {
                    "per-page": 1,
                    navigationEnabled: false,
                    "mouse-drag": false
                  }
                },
                [
                  _c("div", { staticClass: "container-information car-promo" }),
                  _c("slide", [
                    _c(
                      "div",
                      { staticClass: "container-information-categories" },
                      [
                        _c("container", { staticClass: " flex" }, [
                          _c(
                            "a",
                            {
                              staticClass: "img-categories",
                              attrs: {
                                href:
                                  "https://www.pertinhodecasa.com.br/vitrine/vinagreira-viga?utm_source=organic&utm_medium=landingpage&utm_campaign=vitrinehomeseller"
                              }
                            },
                            [
                              _c("img", {
                                attrs: {
                                  src: require("@/assets/images/comidasERestaurantes.png")
                                }
                              })
                            ]
                          )
                        ])
                      ],
                      1
                    )
                  ]),
                  _c("slide", [
                    _c(
                      "div",
                      { staticClass: "container-information-categories" },
                      [
                        _c("container", { staticClass: "flex" }, [
                          _c(
                            "a",
                            {
                              staticClass: "img-categories",
                              attrs: {
                                href:
                                  "https://www.pertinhodecasa.com.br/vitrine/kolobo?utm_source=organic&utm_medium=landingpage&utm_campaign=vitrinehomeseller"
                              }
                            },
                            [
                              _c("img", {
                                attrs: {
                                  src: require("@/assets/images/roupasEAcessorios.png")
                                }
                              })
                            ]
                          )
                        ])
                      ],
                      1
                    )
                  ]),
                  _c("slide", [
                    _c(
                      "div",
                      { staticClass: "container-information-categories" },
                      [
                        _c("container", { staticClass: "flex" }, [
                          _c(
                            "a",
                            {
                              staticClass: "img-categories",
                              attrs: {
                                href:
                                  "https://www.pertinhodecasa.com.br/vitrine/sintropia-cosmeticos-agroflorestais?utm_source=organic&utm_medium=landingpage&utm_campaign=vitrinehomeseller"
                              }
                            },
                            [
                              _c("img", {
                                attrs: {
                                  src: require("@/assets/images/saude.png")
                                }
                              })
                            ]
                          )
                        ])
                      ],
                      1
                    )
                  ])
                ],
                1
              )
            ],
            1
          )
        ]),
        _vm._m(10),
        _c("div", { staticClass: "container-video" }, [
          _c("p", { staticClass: "title-video" }, [
            _vm._v("Tá na dúvida se a Pertinho é pra você? ")
          ]),
          _vm._m(11),
          _vm._m(12),
          _c(
            "div",
            { staticClass: "div-button-yellow" },
            [
              _c(
                "router-link",
                {
                  staticClass: "button-yellow-click",
                  attrs: { to: "/quero-vender" }
                },
                [
                  _c(
                    "button",
                    {
                      staticClass:
                        " btn  d-flex align-items-center justify-content-center restantes m-0 button-yellow "
                    },
                    [
                      _c("p", { staticClass: "button-text" }, [
                        _vm._v("Criar meu negócio na Pertinho de Casa")
                      ])
                    ]
                  )
                ]
              )
            ],
            1
          )
        ]),
        _c("div", { staticClass: "browser-marker" }, [
          _c("div", { staticClass: "container-local-seller" }, [
            _c("div", { staticClass: " btn-fluid banner-b" }, [
              _vm._m(13),
              _c(
                "div",
                { staticClass: "container-local-seller-box" },
                [
                  _c(
                    "container",
                    { staticClass: "container-local-seller-contact" },
                    [
                      _c("div", { staticClass: "div-text-local-seller" }, [
                        _c("h2", { staticClass: "sub-title-local-seller" }, [
                          _vm._v("Nova Friburgo")
                        ]),
                        _c("h1", { staticClass: "sub-title-b-local-seller" }, [
                          _vm._v("Rio de Janeiro")
                        ])
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "img-whatsapp-local-seller",
                          attrs: { href: "https://wa.link/w9yyoy" }
                        },
                        [
                          _c("img", {
                            attrs: {
                              src: require("@/assets/images/icone_whatsapp.svg")
                            }
                          })
                        ]
                      )
                    ]
                  ),
                  _c(
                    "container",
                    { staticClass: "container-local-seller-contact" },
                    [
                      _c("div", { staticClass: "div-text-local-seller" }, [
                        _c("h2", { staticClass: "sub-title-local-seller" }, [
                          _vm._v("São Luis")
                        ]),
                        _c("h1", { staticClass: "sub-title-b-local-seller" }, [
                          _vm._v("Maranhão")
                        ])
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "img-whatsapp-local-seller",
                          attrs: { href: "https://wa.link/8eifjj" }
                        },
                        [
                          _c("img", {
                            attrs: {
                              src: require("@/assets/images/icone_whatsapp.svg")
                            }
                          })
                        ]
                      )
                    ]
                  ),
                  _c(
                    "container",
                    { staticClass: "container-local-seller-contact" },
                    [
                      _c("div", { staticClass: "div-text-local-seller" }, [
                        _c("h2", { staticClass: "sub-title-local-seller" }, [
                          _vm._v("Itaguaí")
                        ]),
                        _c("h1", { staticClass: "sub-title-b-local-seller" }, [
                          _vm._v("Rio de Janeiro")
                        ])
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "img-whatsapp-local-seller",
                          attrs: { href: "https://wa.link/aukqry" }
                        },
                        [
                          _c("img", {
                            attrs: {
                              src: require("@/assets/images/icone_whatsapp.svg")
                            }
                          })
                        ]
                      )
                    ]
                  ),
                  _c(
                    "container",
                    { staticClass: "container-local-seller-contact" },
                    [
                      _c("div", { staticClass: "div-text-local-seller" }, [
                        _c("h2", { staticClass: "sub-title-local-seller" }, [
                          _vm._v("Itaguaí")
                        ]),
                        _c("h1", { staticClass: "sub-title-b-local-seller" }, [
                          _vm._v("Rio de Janeiro")
                        ])
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "img-whatsapp-local-seller",
                          attrs: { href: "https://wa.link/d6h86n" }
                        },
                        [
                          _c("img", {
                            attrs: {
                              src: require("@/assets/images/icone_whatsapp.svg")
                            }
                          })
                        ]
                      )
                    ]
                  ),
                  _c(
                    "container",
                    { staticClass: "container-local-seller-contact" },
                    [
                      _c("div", { staticClass: "div-text-local-seller" }, [
                        _c("h2", { staticClass: "sub-title-local-seller" }, [
                          _vm._v("Parauapebas")
                        ]),
                        _c("h1", { staticClass: "sub-title-b-local-seller" }, [
                          _vm._v("Pará")
                        ])
                      ]),
                      _c(
                        "a",
                        {
                          staticClass: "img-whatsapp-local-seller",
                          attrs: { href: "https://wa.link/5z206z" }
                        },
                        [
                          _c("img", {
                            attrs: {
                              src: require("@/assets/images/icone_whatsapp.svg")
                            }
                          })
                        ]
                      )
                    ]
                  )
                ],
                1
              )
            ]),
            _c("p", { staticClass: "text-local-seller" }, [
              _vm._v(
                "Se você mora em alguma dessas cidades e precisa de ajuda com o seu cadastro, temos um responsável pertinho de você. Clique nos ícones e entre em contato pelo WhatsApp."
              )
            ])
          ])
        ]),
        _c("div", { staticClass: "mobile-marker" }, [
          _c("div", { staticClass: " btn-fluid banner-b" }, [
            _vm._m(14),
            _c(
              "div",
              { staticClass: "container-local-seller" },
              [
                _c(
                  "carousel",
                  {
                    staticClass: "carousel-local-seller",
                    attrs: {
                      "per-page": 1,
                      navigationEnabled: false,
                      "mouse-drag": false
                    }
                  },
                  [
                    _c("slide", [
                      _c(
                        "div",
                        { staticClass: "container-information car-promo" },
                        [
                          _c(
                            "container",
                            { staticClass: "container-local-seller-contact" },
                            [
                              _c(
                                "div",
                                { staticClass: "div-text-local-seller" },
                                [
                                  _c(
                                    "h2",
                                    { staticClass: "sub-title-local-seller" },
                                    [_vm._v("Nova Friburgo")]
                                  ),
                                  _c(
                                    "h1",
                                    { staticClass: "sub-title-b-local-seller" },
                                    [_vm._v("Rio de Janeiro")]
                                  )
                                ]
                              ),
                              _c(
                                "a",
                                {
                                  staticClass: "img-whatsapp-local-seller",
                                  attrs: { href: "https://wa.link/w9yyoy" }
                                },
                                [
                                  _c("img", {
                                    attrs: {
                                      src: require("@/assets/images/icone_whatsapp.svg")
                                    }
                                  })
                                ]
                              )
                            ]
                          )
                        ],
                        1
                      )
                    ]),
                    _c("slide", [
                      _c(
                        "div",
                        { staticClass: "container-information car-promo" },
                        [
                          _c(
                            "container",
                            { staticClass: "container-local-seller-contact" },
                            [
                              _c(
                                "div",
                                { staticClass: "div-text-local-seller" },
                                [
                                  _c(
                                    "h2",
                                    { staticClass: "sub-title-local-seller" },
                                    [_vm._v("São Luis")]
                                  ),
                                  _c(
                                    "h1",
                                    { staticClass: "sub-title-b-local-seller" },
                                    [_vm._v("Maranhão")]
                                  )
                                ]
                              ),
                              _c(
                                "a",
                                {
                                  staticClass: "img-whatsapp-local-seller",
                                  attrs: { href: "https://wa.link/8eifjj" }
                                },
                                [
                                  _c("img", {
                                    attrs: {
                                      src: require("@/assets/images/icone_whatsapp.svg")
                                    }
                                  })
                                ]
                              )
                            ]
                          )
                        ],
                        1
                      )
                    ]),
                    _c("slide", { staticStyle: { "margin-bottom": "3%" } }, [
                      _c(
                        "div",
                        { staticClass: "container-information-local-seller" },
                        [
                          _c(
                            "container",
                            { staticClass: "container-local-seller-contact" },
                            [
                              _c(
                                "div",
                                { staticClass: "div-text-local-seller" },
                                [
                                  _c(
                                    "h2",
                                    { staticClass: "sub-title-local-seller" },
                                    [_vm._v("Itaguaí")]
                                  ),
                                  _c(
                                    "h1",
                                    { staticClass: "sub-title-b-local-seller" },
                                    [_vm._v("Rio de Janeiro")]
                                  )
                                ]
                              ),
                              _c(
                                "a",
                                {
                                  staticClass: "img-whatsapp-local-seller",
                                  attrs: { href: "https://wa.link/aukqry" }
                                },
                                [
                                  _c("img", {
                                    attrs: {
                                      src: require("@/assets/images/icone_whatsapp.svg")
                                    }
                                  })
                                ]
                              )
                            ]
                          )
                        ],
                        1
                      )
                    ]),
                    _c("slide", [
                      _c(
                        "div",
                        { staticClass: "container-information car-promo" },
                        [
                          _c(
                            "container",
                            { staticClass: "container-local-seller-contact" },
                            [
                              _c(
                                "div",
                                { staticClass: "div-text-local-seller" },
                                [
                                  _c(
                                    "h2",
                                    { staticClass: "sub-title-local-seller" },
                                    [_vm._v("Itaguaí")]
                                  ),
                                  _c(
                                    "h1",
                                    { staticClass: "sub-title-b-local-seller" },
                                    [_vm._v("Rio de Janeiro")]
                                  )
                                ]
                              ),
                              _c(
                                "a",
                                {
                                  staticClass: "img-whatsapp-local-seller",
                                  attrs: { href: "https://wa.link/d6h86n" }
                                },
                                [
                                  _c("img", {
                                    attrs: {
                                      src: require("@/assets/images/icone_whatsapp.svg")
                                    }
                                  })
                                ]
                              )
                            ]
                          )
                        ],
                        1
                      )
                    ]),
                    _c("slide", [
                      _c(
                        "div",
                        { staticClass: "container-information car-promo" },
                        [
                          _c(
                            "container",
                            { staticClass: "container-local-seller-contact" },
                            [
                              _c(
                                "div",
                                { staticClass: "div-text-local-seller" },
                                [
                                  _c(
                                    "h2",
                                    { staticClass: "sub-title-local-seller" },
                                    [_vm._v("Parauapebas")]
                                  ),
                                  _c(
                                    "h1",
                                    { staticClass: "sub-title-b-local-seller" },
                                    [_vm._v("Pará")]
                                  )
                                ]
                              ),
                              _c(
                                "a",
                                {
                                  staticClass: "img-whatsapp-local-seller",
                                  attrs: { href: "https://wa.link/5z206z" }
                                },
                                [
                                  _c("img", {
                                    attrs: {
                                      src: require("@/assets/images/icone_whatsapp.svg")
                                    }
                                  })
                                ]
                              )
                            ]
                          )
                        ],
                        1
                      )
                    ])
                  ],
                  1
                ),
                _c("p", { staticClass: "text-local-seller" }, [
                  _vm._v(
                    "Se você mora em alguma dessas cidades e precisa de ajuda com o seu cadastro, temos um responsável pertinho de você. Clique nos ícones e entre em contato pelo WhatsApp."
                  )
                ])
              ],
              1
            )
          ])
        ]),
        _c("div", { staticClass: "div-bar" }),
        _c(
          "div",
          { staticClass: "container-final" },
          [
            _vm._m(15),
            _vm._m(16),
            _c("help-button-open-call", {
              attrs: {
                position: "right",
                spacingBottom: "true",
                chatbotId: "dashboard"
              }
            }),
            _vm._m(17),
            _vm._m(18)
          ],
          1
        )
      ]),
      _c("Footer")
    ],
    1
  )
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "div-title" }, [
      _c("p", { staticClass: "title" }, [
        _vm._v(
          "A Pertinho de Casa é exclusiva e dedicada a você que tem um micro ou pequeno negócio"
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: " d-flex frame-catalog" }, [
      _c("div", { staticClass: "  container-fluid d-flex div-catalog" }, [
        _c("img", {
          staticClass: " d-flex cart-shopping",
          attrs: { src: require("../../assets/images/shopping-cart-icon.svg") }
        }),
        _c("div", { staticClass: "text-container-catalog" }, [
          _c("p", { staticClass: "title-catalog" }, [
            _vm._v("Uma plataforma gratuita de verdade e completa para você!")
          ]),
          _c("p", { staticClass: "sub-text-catalog" }, [
            _vm._v("O "),
            _c("b", [_vm._v("catálogo digital")]),
            _vm._v(
              " é uma ferramenta ideal para quem usa as redes sociais para divulgar seu negócio e deseja ter um site ou vitrine para organizar seus produtos e vender de uma forma mais profissional, oferecendo um melhor atendimento e experiência para o seu cliente."
            )
          ]),
          _c("p", { staticClass: "final-text-catalog" }, [
            _vm._v(
              "Sem custos de ativação, mensalidade ou qualquer taxa sobre vendas. "
            ),
            _c("b", [_vm._v(" A vitrine é sua, de graça e para sempre!")])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      {
        staticClass:
          "div-4 d-flex justify-content-center align-items-flex-start"
      },
      [
        _c("img", {
          staticClass: "painel-1",
          attrs: { src: require("../../assets/images/painel 1.png") }
        }),
        _c("div", { staticClass: "text-benefits justify-content-center" }, [
          _c("h2", { staticClass: "sub-title-benefits" }, [
            _vm._v(" Um aplicativo para chamar de seu!")
          ]),
          _c("div", { staticClass: "div-benefits d-flex" }, [
            _c("img", {
              staticClass: "check",
              attrs: { src: require("../../assets/images/Check.svg") }
            }),
            _c("p", { staticClass: "sub-text-benefits" }, [
              _vm._v(" Gerencie suas vendas a partir de um só lugar")
            ])
          ]),
          _c("div", { staticClass: "div-benefits d-flex" }, [
            _c("img", {
              staticClass: "check",
              attrs: { src: require("../../assets/images/Check.svg") }
            }),
            _c("p", { staticClass: "sub-text-benefits" }, [
              _vm._v(" Acesso rápido aos pedidos")
            ])
          ]),
          _c("div", { staticClass: "div-benefits d-flex" }, [
            _c("img", {
              staticClass: "check",
              attrs: { src: require("../../assets/images/Check.svg") }
            }),
            _c("p", { staticClass: "sub-text-benefits" }, [
              _vm._v(" Visualização detalhada e edição de produtos")
            ])
          ]),
          _c("div", { staticClass: "div-benefits d-flex" }, [
            _c("img", {
              staticClass: "check",
              attrs: { src: require("../../assets/images/Check.svg") }
            }),
            _c("p", { staticClass: "sub-text-benefits" }, [
              _vm._v(" Um painel completo com todas as informações importantes")
            ])
          ]),
          _c("p", { staticClass: "sub-text-benefits" }, [
            _vm._v(" A praticidade que o seu "),
            _c("b", [_vm._v("negócio precisa.")])
          ]),
          _c(
            "a",
            {
              staticClass: "button-yellow-click",
              attrs: {
                href:
                  "https://play.google.com/store/apps/details?id=br.com.pertinhodecasa.vendedores"
              }
            },
            [
              _c("button", { staticClass: "button-benefits" }, [
                _c("p", { staticClass: "text-button-benefits" }, [
                  _vm._v("Baixar a Pertinho de Casa no meu celular")
                ])
              ])
            ]
          ),
          _c("p", { staticClass: "mini-text-benefits" }, [
            _vm._v(
              " *O aplicativo, hoje está disponível para Android, mas ainda assim, caso o seu aparelho seja IOS, e possível acessar sua área do vendedor e tudo o que precisar pelo próprio site. "
            )
          ])
        ])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      {
        staticClass:
          "div-4 d-flex  justify-content-center  align-items-flex-start"
      },
      [
        _c("img", {
          staticClass: "painel-2",
          attrs: { src: require("../../assets/images/painel 1-1.png") }
        }),
        _c("div", { staticClass: "text-benefits justify-content-center" }, [
          _c("h2", { staticClass: "sub-title-benefits" }, [
            _vm._v(" Com uma vitrine na Pertinho, seu cliente pode:")
          ]),
          _c("div", { staticClass: "div-benefits d-flex" }, [
            _c("img", {
              staticClass: "check",
              attrs: { src: require("../../assets/images/Check.svg") }
            }),
            _c("p", { staticClass: "sub-text-benefits" }, [
              _vm._v(
                " Encontrar o seu negócio por produto, nome, temas ou localização"
              )
            ])
          ]),
          _c("div", { staticClass: "div-benefits d-flex" }, [
            _c("img", {
              staticClass: "check",
              attrs: { src: require("../../assets/images/Check.svg") }
            }),
            _c("p", { staticClass: "sub-text-benefits" }, [
              _vm._v(
                " Visualizar toda a sua vitrine de produtos, detalhes e valores"
              )
            ])
          ]),
          _c("div", { staticClass: "div-benefits d-flex" }, [
            _c("img", {
              staticClass: "check",
              attrs: { src: require("../../assets/images/Check.svg") }
            }),
            _c("p", { staticClass: "sub-text-benefits" }, [
              _vm._v(
                " Saber quais os modos de pagamento que seu negócio oferece"
              )
            ])
          ]),
          _c("div", { staticClass: "div-benefits d-flex" }, [
            _c("img", {
              staticClass: "check",
              attrs: { src: require("../../assets/images/Check.svg") }
            }),
            _c("p", { staticClass: "sub-text-benefits" }, [
              _vm._v(" Conversar com você diretamente no WhatsApp")
            ])
          ]),
          _c("div", { staticClass: "div-benefits d-flex" }, [
            _c("img", {
              staticClass: "check",
              attrs: { src: require("../../assets/images/Check.svg") }
            }),
            _c("p", { staticClass: "sub-text-benefits" }, [
              _vm._v(" Montar um pedido direto pela plataforma")
            ])
          ]),
          _c("div", { staticClass: "div-benefits d-flex" }, [
            _c("img", {
              staticClass: "check",
              attrs: { src: require("../../assets/images/Check.svg") }
            }),
            _c("p", { staticClass: "sub-text-benefits" }, [
              _vm._v(
                " Acompanhar todo o processo até a entrega do produto ou realização do serviço"
              )
            ])
          ])
        ]),
        _c("img", {
          staticClass: "painel-3",
          attrs: { src: require("../../assets/images/painel 1-1.png") }
        })
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "div-benefits d-flex" }, [
      _c("img", {
        staticClass: "check",
        attrs: { src: require("../../assets/images/Check.svg") }
      }),
      _c("p", { staticClass: "sub-text-benefits" }, [
        _vm._v(
          " Tire suas dúvidas diretamente com nosso suporte humanizado ou com a nossa assistente virtual"
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "div-benefits d-flex" }, [
      _c("img", {
        staticClass: "check",
        attrs: { src: require("../../assets/images/Check.svg") }
      }),
      _c("p", { staticClass: "sub-text-benefits" }, [
        _vm._v(
          " Tenha acesso a tutoriais e guias para explorar todas as funcionalidades da Pertinho e ter uma vitrine funcional e atrativa"
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "div-benefits d-flex" }, [
      _c("img", {
        staticClass: "check",
        attrs: { src: require("../../assets/images/Check.svg") }
      }),
      _c("p", { staticClass: "sub-text-benefits" }, [
        _vm._v(
          " Profissionalize o seu negócio com nossos cursos gratuitos de empreendedorismo, finanças e divulgação"
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "div-benefits d-flex" }, [
      _c("img", {
        staticClass: "check",
        attrs: { src: require("../../assets/images/Check.svg") }
      }),
      _c("p", { staticClass: "sub-text-benefits" }, [
        _vm._v(
          " Acesse blogs com conteúdos de marketing, datas comemorativas, novidades e tendências"
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "div-title-categories" }, [
      _c("p", { staticClass: "title-categories" }, [
        _vm._v("Não importa o que você vende,")
      ]),
      _c("p", { staticClass: "title" }, [_vm._v("a Pertinho te atende")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "div-title-categories" }, [
      _c("p", { staticClass: "title-categories" }, [
        _vm._v("Não importa o que você vende,")
      ]),
      _c("p", { staticClass: "title" }, [_vm._v("a Pertinho te atende")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "container-depoiment" }, [
      _c("div", { staticClass: "div-title-depoiment-mobile" }, [
        _c("p", { staticClass: "title-depoiment" }, [
          _vm._v("Quem está na Pertinho já está amando")
        ]),
        _c("p", { staticClass: "title" }, [
          _vm._v("E você também pode ter essa experiência")
        ])
      ]),
      _c("div", { staticClass: "depoiment" }, [
        _c("div", { staticClass: "circle-depoiment" }, [
          _c("img", {
            staticClass: "img-depoiment",
            attrs: { src: require("@/assets/images/depoiment-seller.png") }
          })
        ]),
        _c("div", { staticClass: "div-text-depoiment" }, [
          _c("p", { staticClass: "title-text-depoiment" }, [
            _vm._v("Aldnéria Joaquina Rodrigues Oliveira")
          ]),
          _c("p", { staticClass: "text-depoiment" }, [
            _vm._v(
              "Em 2020, devido à pandemia, conheci a REDE ASTA. Durante os aprendizados, conheci várias opções de plataformas de vendas online, dentre elas a Pertinho de Casa, para podermos alcançar nossos objetivos. Vender pela Pertinho me fez acreditar nesse sonho! Pois, hoje, sou empreendedora, artesã, costureira e estou extremamente feliz por trabalhar e poder acompanhar o cotidiano dos meus filhos. "
            )
          ])
        ]),
        _c("div", { staticClass: "div-button-depoiment" }, [
          _c(
            "a",
            {
              staticStyle: { "text-decoration": "none" },
              attrs: {
                href:
                  "https://pertinhodecasa.com.br/vitrine/alfinetinho-atelie?utm_source=organic&utm_medium=landingpage&utm_campaign=depoimentolanding"
              }
            },
            [
              _c("button", { staticClass: "button-depoiment" }, [
                _c("p", { staticClass: "text-button-depoiment" }, [
                  _vm._v("Ver vitrine ")
                ])
              ])
            ]
          )
        ])
      ]),
      _c("div", { staticClass: "div-title-depoiment" }, [
        _c("p", { staticClass: "title-depoiment" }, [
          _vm._v("Quem está na Pertinho já está amando")
        ]),
        _c("p", { staticClass: "title" }, [
          _vm._v("E você também pode ter essa experiência")
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "div-text-video" }, [
      _c("p", { staticClass: "sub-title-video" }, [
        _c("strong", [_vm._v("Faz o teste: é gratuito!")])
      ]),
      _c("p", { staticClass: "sub-title-text-video " }, [
        _vm._v(
          "Chegou a hora de digitalizar o seu negócio e ter sua vitrine virtual."
        )
      ]),
      _c("p", { staticClass: "sub-title-end-video " }, [
        _vm._v(
          "Desfrute de todas as vantagens de ter um pequeno negócio online"
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "container-text-video" }, [
      _c("div", { staticClass: "div-text-video" }, [
        _c("p", { staticClass: "text-video" }, [
          _c("strong", [_vm._v(" A Pertinho de Casa ")]),
          _vm._v(
            " vai muito além de uma plataforma de compra e vendas. Nós trazemos o movimento de Locallização para as cidades brasileiras. Assim, damos força e suporte aos negócios locais! "
          )
        ]),
        _c("p", { staticClass: "text-video" }, [
          _vm._v(
            "Os pequenos negócios surgem mais por necessidade do que por oportunidade, então, entendemos que muitas vezes os empreendedores “caem de paraquedas” nesse mundo de empreender, organizar, atender, precificar…"
          )
        ]),
        _c("p", { staticClass: "text-video" }, [
          _vm._v(
            "Conte conosco para continuar impulsionando a economia local, gerando mais empregos e dando força para sua comunidade. "
          )
        ])
      ]),
      _c(
        "section",
        {
          staticClass:
            "d-flex align-items-center justify-content-center youtube-video"
        },
        [
          _c("iframe", {
            staticClass: "iframe-video",
            staticStyle: { "border-radius": "20px" },
            attrs: {
              width: "470",
              height: "264",
              src: "https://www.youtube.com/embed/qIysTgiXeX8",
              title: "YouTube video player",
              frameborder: "0",
              allow:
                "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",
              allowfullscreen: ""
            }
          })
        ]
      )
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "div-title" }, [
      _c("p", { staticClass: "title-local-seller" }, [
        _vm._v("A Pertinho de Casa tem representantes locais em")
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "div-title" }, [
      _c("p", { staticClass: "title-local-seller" }, [
        _vm._v("A Pertinho de Casa tem representantes locais em")
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: " d-flex box-final" }, [
      _c("div", { staticClass: "container-text-1" }, [
        _c("p", { staticClass: "text-final" }, [
          _vm._v(
            "Pesquisamos, testamos e analisamos muito para desenvolver uma plataforma que desse oportunidade para o pequeno empreendedor. "
          )
        ]),
        _c("p", { staticClass: "text-final" }, [
          _vm._v(
            "Aqui na Pertinho, sempre que seu cliente realiza um pedido, você recebe uma notificação no celular! Ao confirmar que recebeu o pedido, já pode começar a preparar o item ou organizar sua execução."
          )
        ])
      ]),
      _c("div", { staticClass: "container-text-2" }, [
        _c("p", { staticClass: "text-final" }, [
          _vm._v(
            'Além disso, temos a tualização dos status dos pedidos. Isso para manter o consumidor informado sobre todo o processo, são eles "pedido aceito", "pedido sendo preparado\'\' ou “saiu para entrega".'
          )
        ]),
        _c("p", { staticClass: "text-final" }, [
          _vm._v(
            "Tudo para que você mantenha uma relação de transparência com seus clientes e evite falhas de comunicação."
          )
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "text-final-baseboard" }, [
      _c("strong", [
        _vm._v(
          "Com certeza, uma solução completa para os seus consumidores fecharem pedido com você!"
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "container-logo-final" }, [
      _c("img", {
        staticClass: "logo-pertinho",
        staticStyle: { "justify-self": "center" },
        attrs: { src: require("@/assets/images/icon-pertinho-white.svg") }
      }),
      _c("img", {
        staticClass: "pertinho-final",
        staticStyle: { "justify-self": "center" },
        attrs: { src: require("@/assets/images/pertinho-home-seller.svg") }
      })
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "sub-title-final" }, [
      _c("strong", [_vm._v("Pertinho")]),
      _vm._v(" é sobre ter as pessoas no centro (e começo) de tudo.")
    ])
  }
]
render._withStripped = true

export { render, staticRenderFns }"}]}