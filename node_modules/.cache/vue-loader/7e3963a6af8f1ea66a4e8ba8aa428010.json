{"remainingRequest":"/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/aline/GitHub/admin-frontend/src/components/meuNegocio/negocio/negocio.html?vue&type=template&id=4cc6c11a&scoped=true&","dependencies":[{"path":"/home/aline/GitHub/admin-frontend/src/components/meuNegocio/negocio/negocio.html","mtime":1675112993815},{"path":"/home/aline/GitHub/admin-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1673370377252},{"path":"/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1673370389594}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}