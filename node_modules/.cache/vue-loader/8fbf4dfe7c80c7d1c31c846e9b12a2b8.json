{"remainingRequest":"/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/aline/GitHub/admin-frontend/src/components/import-products/import-results-modal/import-results-modal.html?vue&type=template&id=178c11cc&scoped=true&","dependencies":[{"path":"/home/aline/GitHub/admin-frontend/src/components/import-products/import-results-modal/import-results-modal.html","mtime":1673321154834},{"path":"/home/aline/GitHub/admin-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1673370377252},{"path":"/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1673370389594}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}