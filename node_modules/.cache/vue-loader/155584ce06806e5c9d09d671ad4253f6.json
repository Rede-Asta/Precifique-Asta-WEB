{"remainingRequest":"/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/aline/GitHub/admin-frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/aline/GitHub/admin-frontend/src/components/category-modal/CategoryModal.vue?vue&type=template&id=d4d40db6&scoped=true&","dependencies":[{"path":"/home/aline/GitHub/admin-frontend/src/components/category-modal/CategoryModal.vue","mtime":1696439584329},{"path":"/home/aline/GitHub/admin-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1673370377252},{"path":"/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1673370389594},{"path":"/home/aline/GitHub/admin-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1673370377252},{"path":"/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/index.js","mtime":1673370389594}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}