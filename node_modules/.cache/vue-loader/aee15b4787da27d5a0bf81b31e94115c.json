{"remainingRequest":"/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/aline/GitHub/admin-frontend/src/views/home-seller/home-seller.html?vue&type=template&id=7fb3e2be&","dependencies":[{"path":"/home/aline/GitHub/admin-frontend/src/views/home-seller/home-seller.html","mtime":1675112816499},{"path":"/home/aline/GitHub/admin-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1673370377252},{"path":"/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1673370389594}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}