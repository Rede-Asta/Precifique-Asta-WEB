{"remainingRequest":"/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/aline/GitHub/admin-frontend/src/components/orders/tracking/Tracking.vue?vue&type=template&id=755d4c71&scoped=true&","dependencies":[{"path":"/home/aline/GitHub/admin-frontend/src/components/orders/tracking/Tracking.vue","mtime":1696437098293},{"path":"/home/aline/GitHub/admin-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1673370377252},{"path":"/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1673370389594},{"path":"/home/aline/GitHub/admin-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1673370377252},{"path":"/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/index.js","mtime":1673370389594}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}