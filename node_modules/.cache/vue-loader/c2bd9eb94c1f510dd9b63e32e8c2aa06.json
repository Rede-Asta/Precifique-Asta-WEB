{"remainingRequest":"/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/aline/GitHub/admin-frontend/src/components/register-seller/steps-form/step-one/StepOne.vue?vue&type=style&index=0&id=e76bd222&lang=scss&scoped=true&","dependencies":[{"path":"/home/aline/GitHub/admin-frontend/src/components/register-seller/steps-form/step-one/StepOne.vue","mtime":1673321154838},{"path":"/home/aline/GitHub/admin-frontend/node_modules/css-loader/dist/cjs.js","mtime":1673370389401},{"path":"/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1673370389594},{"path":"/home/aline/GitHub/admin-frontend/node_modules/postcss-loader/src/index.js","mtime":1673370389569},{"path":"/home/aline/GitHub/admin-frontend/node_modules/sass-loader/dist/cjs.js","mtime":1673370393532},{"path":"/home/aline/GitHub/admin-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1673370377252},{"path":"/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/index.js","mtime":1673370389594}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKI3N0ZXAtb25lIHsKICAuY2FyZC1hZHZpY2UgewogICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmFmYTsKICAgIGJvcmRlci1yYWRpdXM6IDZweDsKCiAgICAuaW1nLWZsdWlkIHsKICAgICAgbWF4LWhlaWdodDogODBweDsKICAgIH0KICB9CgogIC5jYXJkLWhhcy1hY2NvdW50IHsKICAgIG1heC13aWR0aDogNTAwcHg7CiAgfQp9CgpAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0NDBweCkgewogIC50ZXJtcyB7CiAgICB3aWR0aDogMTAwJTsKICAgIGZvbnQtc2l6ZTogMTBweDsKICAgIG1hcmdpbjogMDsKICB9Cn0K"},{"version":3,"sources":["StepOne.vue"],"names":[],"mappingsfA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"StepOne.vue","sourceRoot":"src/components/register-seller/steps-form/step-one","sourcesContent":["<template>\n  <section id=\"step-one\">\n    <input-form\n      v-if=\"arrayInputs\"\n      :propArrayInputs=\"arrayInputs\"\n      v-on:validateInputs=\"validateInputs\"\n    />\n\n    <modal :active=\"openHasAccountModal\">\n      <div class=\"card card-has-account px-4 py-3\">\n        <h5>\n          Já existe um cadastro com este {{ hasAccountModalText }}, deseja\n          continuar de onde parou?\n        </h5>\n\n        <div class=\"d-flex justify-content-end mt-4\">\n          <button class=\"btn btn-link\" @click=\"continueRegister\">\n            Não, criar um novo cadastro\n          </button>\n\n          <button class=\"btn btn-primary\" @click=\"$router.push('/login')\">\n            Sim\n          </button>\n        </div>\n      </div>\n    </modal>\n\n    <div class=\"card card-advice mb-2\" v-if=\"paramParther === 'gastromotiva'\">\n      <div class=\"card-body\">\n        <img\n          class=\"img-fluid\"\n          src=\"~@/assets/images/logo_gastromotiva.png\"\n          alt=\"logo gastromotiva\"\n        />\n        <input-form\n          v-if=\"arrayInputsParther\"\n          :propArrayInputs=\"arrayInputsParther\"\n          v-on:validateInputs=\"validatePartherInputs\"\n        />\n      </div>\n    </div>\n\n    <div class=\"card card-advice mb-2\" v-if=\"paramParther === 'oi'\">\n      <div class=\"card-body\">\n        <img\n          class=\"img-fluid my-3\"\n          width=\"70\"\n          src=\"~@/assets/images/oi/logo-oi.svg\"\n          alt=\"logo oi\"\n        />\n        <input-form\n          v-if=\"partnerFieldsOi\"\n          :propArrayInputs=\"partnerFieldsOi\"\n          v-on:validateInputs=\"validatePartherInputs\"\n        />\n      </div>\n    </div>\n\n    <div class=\"card card-advice\">\n      <div class=\"card-body\">\n        <p class=\"m-0 text-center\">{{ textAdvice }}</p>\n      </div>\n    </div>\n\n    <section class=\"d-flex flex-column mt-4\">\n      <div\n        class=\"form-check form-check-inline terms\"\n        v-for=\"item in arrayTerms\"\n      >\n        <input\n          class=\"form-check-input click\"\n          type=\"checkbox\"\n          :id=\"item.id\"\n          :value=\"item.accept\"\n          v-model=\"item.accept\"\n          @change=\"setStepOneTerms()\"\n          :disabled=\"propIsUpdate\"\n        />\n        <label\n          class=\"form-check-label click\"\n          :for=\"item.id\"\n          v-html=\"item.label\"\n        ></label>\n      </div>\n    </section>\n  </section>\n</template>\n\n<script lang=\"ts\">\n  import { InputForms, TypeHelp } from \"@/models/inputForms\";\n  import RegisterSellerService from \"@/services/register.service\";\n  import { Component, Prop, Vue, Watch } from \"vue-property-decorator\";\n\n  @Component({})\n  export class StepOne extends Vue {\n    @Prop() propArrayInputs!: InputForms[];\n    @Prop() propParamParther!: string;\n    @Prop() propIsUpdate!: boolean;\n\n    @Watch(\"propIsUpdate\")\n    onUpdate(value) {\n      this.arrayInputs[0].disabled = value;\n      this.arrayInputs[2].disabled = value;\n      this.arrayInputs[3].disabled = value;\n    }\n\n    public openHasAccountModal: boolean = false;\n    public hasAccountModalText: string = \"\";\n\n    public arrayInputs: InputForms[] = this.propArrayInputs;\n    public paramParther = this.propParamParther;\n    public step = \"stepOne\";\n    public textAdvice: string = `A Pertinho de Casa é focada em MEIs, micro e pequenos negócios ou empreendedor@s que ainda não tem CNPJ.`;\n    public arrayTerms = [\n      {\n        accept: false,\n        label: `Aceito os <a class=\"text-primary\" href=\"https://pertinhodecasa.com.br/termos-de-uso\" target=\"_blank\">termos</a> e <a class=\"text-primary\" href=\"https://pertinhodecasa.com.br/politica-de-privacidade\" target=\"_blank\">políticas de privacidade</a> da Pertinho de Casa.*`,\n        id: \"terms\",\n      },\n      {\n        accept: false,\n        label: `Aceito receber novidades da Pertinho de Casa.`,\n        id: \"optIn\",\n      },\n    ];\n\n    public partnerFieldsOi: InputForms[] = [\n      {\n        tag: \"select\",\n        label: \"Como ficou sabendo da parceria Pertinho de Casa e Oi?\",\n        type: \"text\",\n        id: \"oiHowInput\",\n        classContainer: \"form-group my-2 col-12\",\n        classInput: \"form-select form-select-sm\",\n        ariaDescribedby: \"categoryHelp\",\n        placeholder: \"\",\n        help: \"\",\n        required: true,\n        model: \"\",\n        classHelp: \"form-text text-muted\",\n        hasToastHelp: false,\n        toastHelp: ``,\n        options: [\n          {\n            id: \"sms\",\n            label: \"SMS\",\n          },\n          {\n            id: \"e-mail\",\n            label: \"E-mail\",\n          },\n          {\n            id: \"whatsapp\",\n            label: \"WhatsApp\",\n          },\n          {\n            id: \"facebook\",\n            label: \"Facebook\",\n          },\n          {\n            id: \"instagram\",\n            label: \"Instagram\",\n          },\n          {\n            id: \"linkedin\",\n            label: \"LinkedIn\",\n          },\n          {\n            id: \"sou-consumidor\",\n            label: \"Sou Consumidor\",\n          },\n          {\n            id: \"indicacao\",\n            label: \"Indicação\",\n          },\n          {\n            id: \"outros\",\n            label: \"Outros\",\n          },\n        ],\n        showInput: true,\n        selectLabel: \"label\",\n        labelResult: \"Escolha\",\n        noResult: \"Oops!\",\n      },\n      {\n        tag: \"input\",\n        label: \"\",\n        type: \"text\",\n        id: \"oiOthersInput\",\n        classContainer: \"form-group my-2 col-12 col-lg-6\",\n        classInput: \"form-control\",\n        ariaDescribedby: \"\",\n        placeholder: \"Ex: Website, TV, etc\",\n        help: \"\",\n        required: true,\n        disabled: false,\n        model: \"\",\n        classHelp: \"form-text text-muted\",\n        hasToastHelp: false,\n        toastHelp: \"\",\n        showInput: false,\n      },\n    ];\n\n    public arrayInputsParther: InputForms[] = [\n      {\n        tag: \"select\",\n        label: \"Realiza ou realizou cursos da gastromotiva?\",\n        type: \"text\",\n        id: \"gastromotivaInput\",\n        classContainer: \"form-group my-2 col-12\",\n        classInput: \"form-select form-select-sm\",\n        ariaDescribedby: \"categoryHelp\",\n        placeholder: \"Selecione sim ou não\",\n        help: \"Marque este campo se já realizou ou não cursos da gastromotiva\",\n        required: true,\n        model: \"\",\n        classHelp: \"form-text text-muted\",\n        hasToastHelp: false,\n        toastHelp: ``,\n        options: [\n          {\n            id: \"gastro_com_curso\",\n            label: \"Sim\",\n          },\n          {\n            id: \"gastro_sem_curso\",\n            label: \"Não\",\n          },\n        ],\n        showInput: true,\n        selectLabel: \"label\",\n        labelResult: \"Escolha\",\n        noResult: \"Oops!\",\n      },\n      {\n        tag: \"input\",\n        label: \"Qual curso?\",\n        type: \"text\",\n        id: \"gastronomiaCursoInput\",\n        classContainer: \"form-group my-2 col-12\",\n        classInput: \"form-control\",\n        ariaDescribedby: \"gastronomiaCursoNameHelp\",\n        placeholder: \"Digite o nome do curso\",\n        help: \"Informe o nome de um dos cursos que tenha realizado com a gastromotiva\",\n        required: true,\n        model: \"\",\n        classHelp: \"form-text text-muted\",\n        hasToastHelp: false,\n        toastHelp: \"\",\n        showInput: false,\n      },\n    ];\n\n    private registerService = new RegisterSellerService();\n\n    mounted() {\n      this.getStepOneTerms();\n      if (this.arrayInputs[4]) {\n        this.arrayInputs[4].showInput = this.paramParther ? true : false;\n      }\n    }\n\n    private getStepOneTerms() {\n      const stepOneTerms = localStorage.getItem(\"stepOneTerms\")\n        ? localStorage.getItem(\"stepOneTerms\")\n        : \"\";\n      if (stepOneTerms) {\n        this.arrayTerms[0].accept = JSON.parse(stepOneTerms).terms;\n        this.arrayTerms[1].accept = JSON.parse(stepOneTerms).optIn;\n      }\n    }\n\n    public setStepOneTerms() {\n      localStorage.setItem(\n        \"stepOneTerms\",\n        JSON.stringify({\n          terms: this.arrayTerms[0].accept,\n          optIn: this.arrayTerms[1].accept,\n        })\n      );\n      this.$emit(\"stepOneTerms\", this.arrayTerms[0].accept);\n    }\n\n    private async validateSeller(\n      value: { phone?: string; email?: string },\n      inputs: InputForms[]\n    ) {\n      const response = await this.registerService.validateSeller({\n        phone: this.removeMask(value.phone),\n        email: value.email,\n      });\n      const data = await response.json();\n      if (!this.propIsUpdate) {\n        this.checkPhone(value.phone, data.phone, inputs);\n        this.checkEmail(value.email, data.email, inputs);\n      } else {\n        this.checkPhone(value.phone, data.phone, inputs);\n      }\n    }\n\n    private checkPhone(phone: string = \"\", data: boolean, inputs: InputForms[]) {\n      if (phone) {\n        if (!data) {\n          this.setHelp(\n            inputs,\n            1,\n            \"Vendedor com este Número para contato já existe.\",\n            \"invalid\"\n          );\n          this.openHasAccountModal = true;\n          this.hasAccountModalText = \"telefone\";\n        } else {\n          this.setHelp(inputs, 1, \"Ok, Este Número está disponível\", \"valid\");\n        }\n      } else {\n        this.setHelp(\n          inputs,\n          1,\n          \"É neste número que você receberá as notificações sobre seus pedidos e códigos de validação.\",\n          \"normal\"\n        );\n      }\n    }\n\n    private checkEmail(email: string = \"\", data: boolean, inputs: InputForms[]) {\n      if (email) {\n        if (!data) {\n          this.setHelp(\n            inputs,\n            2,\n            \"Vendedor com este E-mail já existe.\",\n            \"invalid\"\n          );\n          this.openHasAccountModal = true;\n          this.hasAccountModalText = \"e-mail\";\n        } else {\n          this.setHelp(inputs, 2, \"Ok, Este E-mail está disponível\", \"valid\");\n        }\n      } else {\n        this.setHelp(\n          inputs,\n          3,\n          \"Verifique se informou seu e-mail corretamente, pois é nele que você receberá todas informações da Pertinho.\",\n          \"normal\"\n        );\n      }\n    }\n\n    private removeMask(mobile) {\n      return mobile.replace(/[^0-9]/g, \"\");\n    }\n\n    public continueRegister() {\n      this.openHasAccountModal = false;\n\n      if (this.hasAccountModalText === \"e-mail\") {\n        this.arrayInputs[2].model = \"\";\n        this.arrayInputs[3].model = \"\";\n        this.setHelp(\n          this.arrayInputs,\n          2,\n          \"Verifique se informou seu e-mail corretamente, pois é nele que você receberá todas informações da Pertinho.\",\n          \"normal\"\n        );\n        this.setHelp(this.arrayInputs, 3, \"\", \"normal\");\n      } else if (this.hasAccountModalText === \"telefone\") {\n        this.arrayInputs[1].model = \"\";\n        this.setHelp(\n          this.arrayInputs,\n          1,\n          \"É neste número que você receberá as notificações sobre seus pedidos e códigos de validação.\",\n          \"normal\"\n        );\n      }\n\n      this.hasAccountModalText = \"\";\n    }\n\n    public validatePartherInputs(inputs: InputForms[]) {\n      const stepModel: Array<{}> = [];\n      inputs.forEach((input) => {\n        const data: {\n          label?: string;\n          id?: string;\n        } = JSON.parse(JSON.stringify(inputs[0].model));\n        if (data.id === \"gastro_com_curso\" || data.id === \"outros\") {\n          inputs[1].showInput = true;\n        } else {\n          inputs[1].showInput = false;\n        }\n\n        stepModel.push(input.model);\n        this.$emit(\"storageInputsStep\", \"parther\", stepModel);\n      });\n    }\n\n    public validateInputs(inputs: InputForms[]) {\n      const stepModel: Array<{}> = [];\n      inputs.forEach((input) => {\n        if (inputs[1].model) {\n          this.addPhoneMask(inputs, 1, \"model\");\n        }\n\n        if (inputs[1].model || inputs[2].model) {\n          this.validateSeller(\n            { phone: inputs[1].model, email: inputs[2].model },\n            inputs\n          );\n        }\n\n        if (inputs[2].model && inputs[3].model) {\n          if (!this.checkMatchingWords(inputs[2].model, inputs[3].model)) {\n            this.setHelp(inputs, 3, \"Os e-mails não coincidem\", \"invalid\");\n            localStorage.setItem(\"stepOneEmail\", JSON.stringify(false));\n            this.$emit(\"stepOneEmail\", false);\n          } else {\n            this.setHelp(inputs, 3, \"Ok\", \"valid\");\n            localStorage.setItem(\"stepOneEmail\", JSON.stringify(true));\n            this.$emit(\"stepOneEmail\", true);\n          }\n        }\n        stepModel.push(input.model);\n        this.storageInputsStep(stepModel);\n      });\n    }\n\n    private addPhoneMask(inputs: InputForms[], index: number, name: string) {\n      inputs[index][name] = inputs[index][name].replace(\n        /(\\d{2})(\\d{5})(\\d{4})/,\n        (regex, arg1, arg2, arg3) => `(${arg1}) ${arg2}-${arg3}`\n      );\n    }\n\n    private setHelp(\n      inputs: InputForms[],\n      index: number,\n      helpMsg: string,\n      type: TypeHelp\n    ) {\n      switch (type) {\n        case \"valid\":\n          this.setClassAndHelp(inputs, index, \"help\", helpMsg);\n          this.setClassAndHelp(\n            inputs,\n            index,\n            \"classHelp\",\n            \"form-text valid-feedback\"\n          );\n          this.setClassAndHelp(\n            inputs,\n            index,\n            \"classInput\",\n            \"form-control is-valid\"\n          );\n          break;\n        case \"invalid\":\n          this.setClassAndHelp(inputs, index, \"help\", helpMsg);\n          this.setClassAndHelp(\n            inputs,\n            index,\n            \"classHelp\",\n            \"form-text invalid-feedback\"\n          );\n          this.setClassAndHelp(\n            inputs,\n            index,\n            \"classInput\",\n            \"form-control is-invalid\"\n          );\n          break;\n        case \"normal\":\n          this.setClassAndHelp(inputs, index, \"help\", helpMsg);\n          this.setClassAndHelp(\n            inputs,\n            index,\n            \"classHelp\",\n            \"form-text text-muted\"\n          );\n          this.setClassAndHelp(inputs, index, \"classInput\", \"form-control\");\n          break;\n      }\n    }\n\n    private setClassAndHelp(\n      inputs: InputForms[],\n      index: number,\n      name: string,\n      value: string\n    ) {\n      inputs[index][name] = value;\n    }\n\n    public storageInputsStep(inputsModel: Array<{}>) {\n      this.$emit(\"storageInputsStep\", this.step, inputsModel);\n    }\n\n    private checkMatchingWords(valueA: string, valueB: string) {\n      return Boolean(valueA === valueB);\n    }\n  }\n\n  export { StepOne as default };\n</script>\n\n<style lang=\"scss\" scoped>\n  #step-one {\n    .card-advice {\n      background-color: #fffafa;\n      border-radius: 6px;\n\n      .img-fluid {\n        max-height: 80px;\n      }\n    }\n\n    .card-has-account {\n      max-width: 500px;\n    }\n  }\n\n  @media screen and (max-width: 440px) {\n    .terms {\n      width: 100%;\n      font-size: 10px;\n      margin: 0;\n    }\n  }\n</style>\n"]}]}