{"remainingRequest":"/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/aline/GitHub/admin-frontend/src/components/vitrine-modal/vitrine-modal.vue?vue&type=style&index=0&id=57f35eef&lang=scss&scoped=true&","dependencies":[{"path":"/home/aline/GitHub/admin-frontend/src/components/vitrine-modal/vitrine-modal.vue","mtime":1688662949672},{"path":"/home/aline/GitHub/admin-frontend/node_modules/css-loader/dist/cjs.js","mtime":1673370389401},{"path":"/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1673370389594},{"path":"/home/aline/GitHub/admin-frontend/node_modules/postcss-loader/src/index.js","mtime":1673370389569},{"path":"/home/aline/GitHub/admin-frontend/node_modules/sass-loader/dist/cjs.js","mtime":1673370393532},{"path":"/home/aline/GitHub/admin-frontend/node_modules/cache-loader/dist/cjs.js","mtime":1673370377252},{"path":"/home/aline/GitHub/admin-frontend/node_modules/vue-loader/lib/index.js","mtime":1673370389594}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLndyYXBwZXIgewogIGJhY2tncm91bmQtY29sb3I6ICNmNGY1Zjk7CiAgYm9yZGVyLXJhZGl1czogNnB4Owp9Cg=="},{"version":3,"sources":["vitrine-modal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiFA;AACA;AACA;AACA","file":"vitrine-modal.vue","sourceRoot":"src/components/vitrine-modal","sourcesContent":["<template>\n  <modal :active=\"showVitrineModal\">\n    <div class=\"wrapper\">\n      <vitrine-image-import\n        :showImportImageModal=\"true\"\n        @showImageCropper=\"handleShowImageCropper\"\n        @closeImageModal=\"$emit('closeLogoModal')\"\n        @setImageToCrop=\"handleSetImageToCrop\"\n      />\n      <vitrine-image-cropper\n        :showImageCropper=\"showImageCropper\"\n        :imageToCrop=\"imageToCrop\"\n        @closeImageCropper=\"showImageCropper = false\"\n        @uploadImage=\"handleImageUpload\"\n      />\n      <vitrine-image-loading-screen\n        :showLoadingScreen=\"showLoadingScreen\"\n        :image=\"image\"\n      />\n    </div>\n  </modal>\n</template>\n<script lang=\"ts\">\n  import Vue from 'vue'\n  import vitrineImageImport from './vitrine-image-import.vue' \n  import VitrineImageCropper from './vitrine-image-cropper.vue'\n  import VitrineImageLoadingScreen from './vitrine-image-loading-screen.vue'\n  import userService from '@/services/user.service'\n  export default Vue.extend({\n  components: { vitrineImageImport, VitrineImageCropper, VitrineImageLoadingScreen },\n    name: 'VitrineModal',\n    props: {\n      showVitrineModal: {\n        type: Boolean,\n        required: true\n      }\n    },\n    data: () => ({\n      imageToCrop: '',\n      showImageCropper: false,\n      showLoadingScreen: false,\n      image: {} as any,\n      userService: new userService()\n    }),\n    methods: {\n      handleShowImageCropper() {\n        if (!this.imageToCrop) {\n          return\n        }\n        this.showImageCropper = true\n      },\n      handleSetImageToCrop(data) {\n        console.log({data})\n        this.imageToCrop = data\n      },\n      async handleImageUpload([message, imageData]) {\n        if (message !== 'success') {\n          return\n        }\n        try {\n          this.image = imageData\n  \n          this.showLoadingScreen = true\n          const res = await this.userService.uploadVitrine(this.image, (event) => {\n            let progress: number = Math.round(\n              (event.loaded * 100) / event.total\n            );\n            this.image.uploadProgress = progress;\n          })\n          this.showImageCropper = false\n          this.showLoadingScreen = false\n          this.$emit('successCloseModal')\n        } catch (error) {\n          console.error({ error })\n        }\n      }\n    }\n  })\n\n</script>\n<style lang=\"scss\" scoped>\n  .wrapper {\n    background-color: #f4f5f9;\n    border-radius: 6px;\n  }\n</style>"]}]}